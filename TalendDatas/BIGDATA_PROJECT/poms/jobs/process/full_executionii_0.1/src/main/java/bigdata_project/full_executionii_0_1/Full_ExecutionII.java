// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package bigdata_project.full_executionii_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Full_ExecutionII Purpose: <br>
 * Description:  <br>
 * @author ray-hann06@hotmail.fr
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class Full_ExecutionII implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Full_ExecutionII";
	private final String projectName = "BIGDATA_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Full_ExecutionII.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Full_ExecutionII.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tRunJob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_26_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_23_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_28_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_25_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_26_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_16_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_17_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_22_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_23_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_27_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_28_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_29_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_21_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_18_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_19_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_20_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_24_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_25_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_2", false);
		start_Hash.put("tRunJob_2", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_2";

	
		int tos_count_tRunJob_2 = 0;
		


 



/**
 * [tRunJob_2 begin ] stop
 */
	
	/**
	 * [tRunJob_2 main ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	
	java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_2.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_2.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_2.add("--father_node=tRunJob_2");
	      			
	        			paraList_tRunJob_2.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_2.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_2.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null){
		paraList_tRunJob_2.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_2 = null;

	
	
		bigdata_project.consu_extrac_0_1.Consu_Extrac childJob_tRunJob_2 = new bigdata_project.consu_extrac_0_1.Consu_Extrac();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_2) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
			        .entrySet()) {
	            dataSources_tRunJob_2.put(talendDataSourceEntry_tRunJob_2.getKey(),
	                    talendDataSourceEntry_tRunJob_2.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
	    }
		  
			childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;
		  
		
		String[][] childReturn_tRunJob_2 = childJob_tRunJob_2.runJob((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));
		
            if(childJob_tRunJob_2.getErrorCode() == null){
                globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getStatus() != null && ("failure").equals(childJob_tRunJob_2.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getErrorCode());
            }
            if (childJob_tRunJob_2.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_2.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_2.getErrorCode();
                if (childJob_tRunJob_2.getErrorCode() != null || ("failure").equals(childJob_tRunJob_2.getStatus())) {
                    java.lang.Exception ce_tRunJob_2 = childJob_tRunJob_2.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_2!=null) ? (ce_tRunJob_2.getClass().getName() + ": " + ce_tRunJob_2.getMessage()) : ""));
                }

 


	tos_count_tRunJob_2++;

/**
 * [tRunJob_2 main ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_2 end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 

ok_Hash.put("tRunJob_2", true);
end_Hash.put("tRunJob_2", System.currentTimeMillis());




/**
 * [tRunJob_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk18", 0, "ok");
								} 
							
							tRunJob_26Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_2 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_26Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_26_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_26", false);
		start_Hash.put("tRunJob_26", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_26";

	
		int tos_count_tRunJob_26 = 0;
		


 



/**
 * [tRunJob_26 begin ] stop
 */
	
	/**
	 * [tRunJob_26 main ] start
	 */

	

	
	
	currentComponent="tRunJob_26";

	
	java.util.List<String> paraList_tRunJob_26 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_26.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_26.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_26.add("--father_node=tRunJob_26");
	      			
	        			paraList_tRunJob_26.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_26.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_26.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_26.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_26 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_26 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_26".equals(tRunJobName_tRunJob_26) && childResumePath_tRunJob_26 != null){
		paraList_tRunJob_26.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_26.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_26");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_26 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_26 = null;

	
	
		bigdata_project.consu_extrac_0_1.Consu_Extrac childJob_tRunJob_26 = new bigdata_project.consu_extrac_0_1.Consu_Extrac();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_26 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_26) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_26 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_26 : talendDataSources_tRunJob_26
			        .entrySet()) {
	            dataSources_tRunJob_26.put(talendDataSourceEntry_tRunJob_26.getKey(),
	                    talendDataSourceEntry_tRunJob_26.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_26.setDataSources(dataSources_tRunJob_26);
	    }
		  
			childJob_tRunJob_26.parentContextMap = parentContextMap_tRunJob_26;
		  
		
		String[][] childReturn_tRunJob_26 = childJob_tRunJob_26.runJob((String[]) paraList_tRunJob_26.toArray(new String[paraList_tRunJob_26.size()]));
		
            if(childJob_tRunJob_26.getErrorCode() == null){
                globalMap.put("tRunJob_26_CHILD_RETURN_CODE", childJob_tRunJob_26.getStatus() != null && ("failure").equals(childJob_tRunJob_26.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_26_CHILD_RETURN_CODE", childJob_tRunJob_26.getErrorCode());
            }
            if (childJob_tRunJob_26.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_26_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_26.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_26.getErrorCode();
                if (childJob_tRunJob_26.getErrorCode() != null || ("failure").equals(childJob_tRunJob_26.getStatus())) {
                    java.lang.Exception ce_tRunJob_26 = childJob_tRunJob_26.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_26!=null) ? (ce_tRunJob_26.getClass().getName() + ": " + ce_tRunJob_26.getMessage()) : ""));
                }

 


	tos_count_tRunJob_26++;

/**
 * [tRunJob_26 main ] stop
 */
	
	/**
	 * [tRunJob_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_26";

	

 



/**
 * [tRunJob_26 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_26";

	

 



/**
 * [tRunJob_26 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_26 end ] start
	 */

	

	
	
	currentComponent="tRunJob_26";

	

 

ok_Hash.put("tRunJob_26", true);
end_Hash.put("tRunJob_26", System.currentTimeMillis());




/**
 * [tRunJob_26 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_26 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_26";

	

 



/**
 * [tRunJob_26 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_26_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_3", false);
		start_Hash.put("tRunJob_3", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_3";

	
		int tos_count_tRunJob_3 = 0;
		


 



/**
 * [tRunJob_3 begin ] stop
 */
	
	/**
	 * [tRunJob_3 main ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	
	java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_3.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_3.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_3.add("--father_node=tRunJob_3");
	      			
	        			paraList_tRunJob_3.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_3.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_3.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_3.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_3 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_3 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_3".equals(tRunJobName_tRunJob_3) && childResumePath_tRunJob_3 != null){
		paraList_tRunJob_3.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_3");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_3 = null;

	
	
		bigdata_project.diag_extrac_0_1.Diag_Extrac childJob_tRunJob_3 = new bigdata_project.diag_extrac_0_1.Diag_Extrac();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_3) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
			        .entrySet()) {
	            dataSources_tRunJob_3.put(talendDataSourceEntry_tRunJob_3.getKey(),
	                    talendDataSourceEntry_tRunJob_3.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_3.setDataSources(dataSources_tRunJob_3);
	    }
		  
			childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;
		  
		
		String[][] childReturn_tRunJob_3 = childJob_tRunJob_3.runJob((String[]) paraList_tRunJob_3.toArray(new String[paraList_tRunJob_3.size()]));
		
            if(childJob_tRunJob_3.getErrorCode() == null){
                globalMap.put("tRunJob_3_CHILD_RETURN_CODE", childJob_tRunJob_3.getStatus() != null && ("failure").equals(childJob_tRunJob_3.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_3_CHILD_RETURN_CODE", childJob_tRunJob_3.getErrorCode());
            }
            if (childJob_tRunJob_3.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_3.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_3.getErrorCode();
                if (childJob_tRunJob_3.getErrorCode() != null || ("failure").equals(childJob_tRunJob_3.getStatus())) {
                    java.lang.Exception ce_tRunJob_3 = childJob_tRunJob_3.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_3!=null) ? (ce_tRunJob_3.getClass().getName() + ": " + ce_tRunJob_3.getMessage()) : ""));
                }

 


	tos_count_tRunJob_3++;

/**
 * [tRunJob_3 main ] stop
 */
	
	/**
	 * [tRunJob_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 



/**
 * [tRunJob_3 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 



/**
 * [tRunJob_3 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_3 end ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 

ok_Hash.put("tRunJob_3", true);
end_Hash.put("tRunJob_3", System.currentTimeMillis());




/**
 * [tRunJob_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tRunJob_15Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_3 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 



/**
 * [tRunJob_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_15", false);
		start_Hash.put("tRunJob_15", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_15";

	
		int tos_count_tRunJob_15 = 0;
		


 



/**
 * [tRunJob_15 begin ] stop
 */
	
	/**
	 * [tRunJob_15 main ] start
	 */

	

	
	
	currentComponent="tRunJob_15";

	
	java.util.List<String> paraList_tRunJob_15 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_15.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_15.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_15.add("--father_node=tRunJob_15");
	      			
	        			paraList_tRunJob_15.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_15.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_15.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_15.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_15 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_15 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_15".equals(tRunJobName_tRunJob_15) && childResumePath_tRunJob_15 != null){
		paraList_tRunJob_15.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_15.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_15");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_15 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_15 = null;

	
	
		bigdata_project.dim_diagnostic_0_1.Dim_Diagnostic childJob_tRunJob_15 = new bigdata_project.dim_diagnostic_0_1.Dim_Diagnostic();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_15 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_15) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_15 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_15 : talendDataSources_tRunJob_15
			        .entrySet()) {
	            dataSources_tRunJob_15.put(talendDataSourceEntry_tRunJob_15.getKey(),
	                    talendDataSourceEntry_tRunJob_15.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_15.setDataSources(dataSources_tRunJob_15);
	    }
		  
			childJob_tRunJob_15.parentContextMap = parentContextMap_tRunJob_15;
		  
		
		String[][] childReturn_tRunJob_15 = childJob_tRunJob_15.runJob((String[]) paraList_tRunJob_15.toArray(new String[paraList_tRunJob_15.size()]));
		
            if(childJob_tRunJob_15.getErrorCode() == null){
                globalMap.put("tRunJob_15_CHILD_RETURN_CODE", childJob_tRunJob_15.getStatus() != null && ("failure").equals(childJob_tRunJob_15.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_15_CHILD_RETURN_CODE", childJob_tRunJob_15.getErrorCode());
            }
            if (childJob_tRunJob_15.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_15_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_15.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_15.getErrorCode();
                if (childJob_tRunJob_15.getErrorCode() != null || ("failure").equals(childJob_tRunJob_15.getStatus())) {
                    java.lang.Exception ce_tRunJob_15 = childJob_tRunJob_15.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_15!=null) ? (ce_tRunJob_15.getClass().getName() + ": " + ce_tRunJob_15.getMessage()) : ""));
                }

 


	tos_count_tRunJob_15++;

/**
 * [tRunJob_15 main ] stop
 */
	
	/**
	 * [tRunJob_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_15";

	

 



/**
 * [tRunJob_15 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_15";

	

 



/**
 * [tRunJob_15 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_15 end ] start
	 */

	

	
	
	currentComponent="tRunJob_15";

	

 

ok_Hash.put("tRunJob_15", true);
end_Hash.put("tRunJob_15", System.currentTimeMillis());




/**
 * [tRunJob_15 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_15 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_15";

	

 



/**
 * [tRunJob_15 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_15_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_4", false);
		start_Hash.put("tRunJob_4", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_4";

	
		int tos_count_tRunJob_4 = 0;
		


 



/**
 * [tRunJob_4 begin ] stop
 */
	
	/**
	 * [tRunJob_4 main ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	
	java.util.List<String> paraList_tRunJob_4 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_4.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_4.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_4.add("--father_node=tRunJob_4");
	      			
	        			paraList_tRunJob_4.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_4.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_4.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_4.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_4 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_4 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_4".equals(tRunJobName_tRunJob_4) && childResumePath_tRunJob_4 != null){
		paraList_tRunJob_4.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_4.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_4");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_4 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_4 = null;

	
	
		bigdata_project.patient_extrac_0_1.Patient_Extrac childJob_tRunJob_4 = new bigdata_project.patient_extrac_0_1.Patient_Extrac();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_4) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_4 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_4 : talendDataSources_tRunJob_4
			        .entrySet()) {
	            dataSources_tRunJob_4.put(talendDataSourceEntry_tRunJob_4.getKey(),
	                    talendDataSourceEntry_tRunJob_4.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_4.setDataSources(dataSources_tRunJob_4);
	    }
		  
			childJob_tRunJob_4.parentContextMap = parentContextMap_tRunJob_4;
		  
		
		String[][] childReturn_tRunJob_4 = childJob_tRunJob_4.runJob((String[]) paraList_tRunJob_4.toArray(new String[paraList_tRunJob_4.size()]));
		
            if(childJob_tRunJob_4.getErrorCode() == null){
                globalMap.put("tRunJob_4_CHILD_RETURN_CODE", childJob_tRunJob_4.getStatus() != null && ("failure").equals(childJob_tRunJob_4.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_4_CHILD_RETURN_CODE", childJob_tRunJob_4.getErrorCode());
            }
            if (childJob_tRunJob_4.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_4_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_4.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_4.getErrorCode();
                if (childJob_tRunJob_4.getErrorCode() != null || ("failure").equals(childJob_tRunJob_4.getStatus())) {
                    java.lang.Exception ce_tRunJob_4 = childJob_tRunJob_4.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_4!=null) ? (ce_tRunJob_4.getClass().getName() + ": " + ce_tRunJob_4.getMessage()) : ""));
                }

 


	tos_count_tRunJob_4++;

/**
 * [tRunJob_4 main ] stop
 */
	
	/**
	 * [tRunJob_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	

 



/**
 * [tRunJob_4 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	

 



/**
 * [tRunJob_4 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_4 end ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	

 

ok_Hash.put("tRunJob_4", true);
end_Hash.put("tRunJob_4", System.currentTimeMillis());




/**
 * [tRunJob_4 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tRunJob_16Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_4 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	

 



/**
 * [tRunJob_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_16", false);
		start_Hash.put("tRunJob_16", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_16";

	
		int tos_count_tRunJob_16 = 0;
		


 



/**
 * [tRunJob_16 begin ] stop
 */
	
	/**
	 * [tRunJob_16 main ] start
	 */

	

	
	
	currentComponent="tRunJob_16";

	
	java.util.List<String> paraList_tRunJob_16 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_16.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_16.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_16.add("--father_node=tRunJob_16");
	      			
	        			paraList_tRunJob_16.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_16.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_16.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_16.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_16 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_16 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_16".equals(tRunJobName_tRunJob_16) && childResumePath_tRunJob_16 != null){
		paraList_tRunJob_16.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_16.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_16");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_16 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_16 = null;

	
	
		bigdata_project.stage_patient_0_1.Stage_Patient childJob_tRunJob_16 = new bigdata_project.stage_patient_0_1.Stage_Patient();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_16 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_16) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_16 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_16 : talendDataSources_tRunJob_16
			        .entrySet()) {
	            dataSources_tRunJob_16.put(talendDataSourceEntry_tRunJob_16.getKey(),
	                    talendDataSourceEntry_tRunJob_16.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_16.setDataSources(dataSources_tRunJob_16);
	    }
		  
			childJob_tRunJob_16.parentContextMap = parentContextMap_tRunJob_16;
		  
		
		String[][] childReturn_tRunJob_16 = childJob_tRunJob_16.runJob((String[]) paraList_tRunJob_16.toArray(new String[paraList_tRunJob_16.size()]));
		
            if(childJob_tRunJob_16.getErrorCode() == null){
                globalMap.put("tRunJob_16_CHILD_RETURN_CODE", childJob_tRunJob_16.getStatus() != null && ("failure").equals(childJob_tRunJob_16.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_16_CHILD_RETURN_CODE", childJob_tRunJob_16.getErrorCode());
            }
            if (childJob_tRunJob_16.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_16_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_16.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_16.getErrorCode();
                if (childJob_tRunJob_16.getErrorCode() != null || ("failure").equals(childJob_tRunJob_16.getStatus())) {
                    java.lang.Exception ce_tRunJob_16 = childJob_tRunJob_16.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_16!=null) ? (ce_tRunJob_16.getClass().getName() + ": " + ce_tRunJob_16.getMessage()) : ""));
                }

 


	tos_count_tRunJob_16++;

/**
 * [tRunJob_16 main ] stop
 */
	
	/**
	 * [tRunJob_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_16";

	

 



/**
 * [tRunJob_16 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_16";

	

 



/**
 * [tRunJob_16 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_16 end ] start
	 */

	

	
	
	currentComponent="tRunJob_16";

	

 

ok_Hash.put("tRunJob_16", true);
end_Hash.put("tRunJob_16", System.currentTimeMillis());




/**
 * [tRunJob_16 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_16:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tRunJob_17Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_16 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_16";

	

 



/**
 * [tRunJob_16 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_16_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_17", false);
		start_Hash.put("tRunJob_17", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_17";

	
		int tos_count_tRunJob_17 = 0;
		


 



/**
 * [tRunJob_17 begin ] stop
 */
	
	/**
	 * [tRunJob_17 main ] start
	 */

	

	
	
	currentComponent="tRunJob_17";

	
	java.util.List<String> paraList_tRunJob_17 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_17.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_17.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_17.add("--father_node=tRunJob_17");
	      			
	        			paraList_tRunJob_17.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_17.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_17.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_17.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_17 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_17 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_17".equals(tRunJobName_tRunJob_17) && childResumePath_tRunJob_17 != null){
		paraList_tRunJob_17.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_17.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_17");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_17 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_17 = null;

	
	
		bigdata_project.dim_patient_0_1.Dim_Patient childJob_tRunJob_17 = new bigdata_project.dim_patient_0_1.Dim_Patient();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_17 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_17) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_17 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_17 : talendDataSources_tRunJob_17
			        .entrySet()) {
	            dataSources_tRunJob_17.put(talendDataSourceEntry_tRunJob_17.getKey(),
	                    talendDataSourceEntry_tRunJob_17.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_17.setDataSources(dataSources_tRunJob_17);
	    }
		  
			childJob_tRunJob_17.parentContextMap = parentContextMap_tRunJob_17;
		  
		
		String[][] childReturn_tRunJob_17 = childJob_tRunJob_17.runJob((String[]) paraList_tRunJob_17.toArray(new String[paraList_tRunJob_17.size()]));
		
            if(childJob_tRunJob_17.getErrorCode() == null){
                globalMap.put("tRunJob_17_CHILD_RETURN_CODE", childJob_tRunJob_17.getStatus() != null && ("failure").equals(childJob_tRunJob_17.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_17_CHILD_RETURN_CODE", childJob_tRunJob_17.getErrorCode());
            }
            if (childJob_tRunJob_17.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_17_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_17.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_17.getErrorCode();
                if (childJob_tRunJob_17.getErrorCode() != null || ("failure").equals(childJob_tRunJob_17.getStatus())) {
                    java.lang.Exception ce_tRunJob_17 = childJob_tRunJob_17.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_17!=null) ? (ce_tRunJob_17.getClass().getName() + ": " + ce_tRunJob_17.getMessage()) : ""));
                }

 


	tos_count_tRunJob_17++;

/**
 * [tRunJob_17 main ] stop
 */
	
	/**
	 * [tRunJob_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_17";

	

 



/**
 * [tRunJob_17 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_17";

	

 



/**
 * [tRunJob_17 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_17 end ] start
	 */

	

	
	
	currentComponent="tRunJob_17";

	

 

ok_Hash.put("tRunJob_17", true);
end_Hash.put("tRunJob_17", System.currentTimeMillis());




/**
 * [tRunJob_17 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_17 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_17";

	

 



/**
 * [tRunJob_17 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_17_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_5", false);
		start_Hash.put("tRunJob_5", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_5";

	
		int tos_count_tRunJob_5 = 0;
		


 



/**
 * [tRunJob_5 begin ] stop
 */
	
	/**
	 * [tRunJob_5 main ] start
	 */

	

	
	
	currentComponent="tRunJob_5";

	
	java.util.List<String> paraList_tRunJob_5 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_5.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_5.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_5.add("--father_node=tRunJob_5");
	      			
	        			paraList_tRunJob_5.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_5.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_5.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_5.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_5 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_5 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_5".equals(tRunJobName_tRunJob_5) && childResumePath_tRunJob_5 != null){
		paraList_tRunJob_5.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_5.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_5");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_5 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_5 = null;

	
	
		bigdata_project.death_fetch_0_1.Death_Fetch childJob_tRunJob_5 = new bigdata_project.death_fetch_0_1.Death_Fetch();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_5) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_5 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_5 : talendDataSources_tRunJob_5
			        .entrySet()) {
	            dataSources_tRunJob_5.put(talendDataSourceEntry_tRunJob_5.getKey(),
	                    talendDataSourceEntry_tRunJob_5.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_5.setDataSources(dataSources_tRunJob_5);
	    }
		  
			childJob_tRunJob_5.parentContextMap = parentContextMap_tRunJob_5;
		  
		
		String[][] childReturn_tRunJob_5 = childJob_tRunJob_5.runJob((String[]) paraList_tRunJob_5.toArray(new String[paraList_tRunJob_5.size()]));
		
            if(childJob_tRunJob_5.getErrorCode() == null){
                globalMap.put("tRunJob_5_CHILD_RETURN_CODE", childJob_tRunJob_5.getStatus() != null && ("failure").equals(childJob_tRunJob_5.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_5_CHILD_RETURN_CODE", childJob_tRunJob_5.getErrorCode());
            }
            if (childJob_tRunJob_5.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_5_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_5.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_5.getErrorCode();
                if (childJob_tRunJob_5.getErrorCode() != null || ("failure").equals(childJob_tRunJob_5.getStatus())) {
                    java.lang.Exception ce_tRunJob_5 = childJob_tRunJob_5.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_5!=null) ? (ce_tRunJob_5.getClass().getName() + ": " + ce_tRunJob_5.getMessage()) : ""));
                }

 


	tos_count_tRunJob_5++;

/**
 * [tRunJob_5 main ] stop
 */
	
	/**
	 * [tRunJob_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_5";

	

 



/**
 * [tRunJob_5 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_5";

	

 



/**
 * [tRunJob_5 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_5 end ] start
	 */

	

	
	
	currentComponent="tRunJob_5";

	

 

ok_Hash.put("tRunJob_5", true);
end_Hash.put("tRunJob_5", System.currentTimeMillis());




/**
 * [tRunJob_5 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk14", 0, "ok");
								} 
							
							tRunJob_22Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_5 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_5";

	

 



/**
 * [tRunJob_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_5_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_22Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_22_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_22", false);
		start_Hash.put("tRunJob_22", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_22";

	
		int tos_count_tRunJob_22 = 0;
		


 



/**
 * [tRunJob_22 begin ] stop
 */
	
	/**
	 * [tRunJob_22 main ] start
	 */

	

	
	
	currentComponent="tRunJob_22";

	
	java.util.List<String> paraList_tRunJob_22 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_22.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_22.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_22.add("--father_node=tRunJob_22");
	      			
	        			paraList_tRunJob_22.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_22.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_22.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_22.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_22 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_22 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_22".equals(tRunJobName_tRunJob_22) && childResumePath_tRunJob_22 != null){
		paraList_tRunJob_22.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_22.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_22");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_22 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_22 = null;

	
	
		bigdata_project.stage_death_0_1.Stage_Death childJob_tRunJob_22 = new bigdata_project.stage_death_0_1.Stage_Death();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_22 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_22) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_22 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_22 : talendDataSources_tRunJob_22
			        .entrySet()) {
	            dataSources_tRunJob_22.put(talendDataSourceEntry_tRunJob_22.getKey(),
	                    talendDataSourceEntry_tRunJob_22.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_22.setDataSources(dataSources_tRunJob_22);
	    }
		  
			childJob_tRunJob_22.parentContextMap = parentContextMap_tRunJob_22;
		  
		
		String[][] childReturn_tRunJob_22 = childJob_tRunJob_22.runJob((String[]) paraList_tRunJob_22.toArray(new String[paraList_tRunJob_22.size()]));
		
            if(childJob_tRunJob_22.getErrorCode() == null){
                globalMap.put("tRunJob_22_CHILD_RETURN_CODE", childJob_tRunJob_22.getStatus() != null && ("failure").equals(childJob_tRunJob_22.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_22_CHILD_RETURN_CODE", childJob_tRunJob_22.getErrorCode());
            }
            if (childJob_tRunJob_22.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_22_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_22.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_22.getErrorCode();
                if (childJob_tRunJob_22.getErrorCode() != null || ("failure").equals(childJob_tRunJob_22.getStatus())) {
                    java.lang.Exception ce_tRunJob_22 = childJob_tRunJob_22.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_22!=null) ? (ce_tRunJob_22.getClass().getName() + ": " + ce_tRunJob_22.getMessage()) : ""));
                }

 


	tos_count_tRunJob_22++;

/**
 * [tRunJob_22 main ] stop
 */
	
	/**
	 * [tRunJob_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_22";

	

 



/**
 * [tRunJob_22 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_22";

	

 



/**
 * [tRunJob_22 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_22 end ] start
	 */

	

	
	
	currentComponent="tRunJob_22";

	

 

ok_Hash.put("tRunJob_22", true);
end_Hash.put("tRunJob_22", System.currentTimeMillis());




/**
 * [tRunJob_22 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_22:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk15", 0, "ok");
								} 
							
							tRunJob_23Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_22 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_22";

	

 



/**
 * [tRunJob_22 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_22_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_23Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_23_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_23", false);
		start_Hash.put("tRunJob_23", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_23";

	
		int tos_count_tRunJob_23 = 0;
		


 



/**
 * [tRunJob_23 begin ] stop
 */
	
	/**
	 * [tRunJob_23 main ] start
	 */

	

	
	
	currentComponent="tRunJob_23";

	
	java.util.List<String> paraList_tRunJob_23 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_23.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_23.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_23.add("--father_node=tRunJob_23");
	      			
	        			paraList_tRunJob_23.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_23.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_23.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_23.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_23 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_23 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_23".equals(tRunJobName_tRunJob_23) && childResumePath_tRunJob_23 != null){
		paraList_tRunJob_23.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_23.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_23");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_23 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_23 = null;

	
	
		bigdata_project.dim_death_0_1.Dim_Death childJob_tRunJob_23 = new bigdata_project.dim_death_0_1.Dim_Death();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_23 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_23) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_23 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_23 : talendDataSources_tRunJob_23
			        .entrySet()) {
	            dataSources_tRunJob_23.put(talendDataSourceEntry_tRunJob_23.getKey(),
	                    talendDataSourceEntry_tRunJob_23.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_23.setDataSources(dataSources_tRunJob_23);
	    }
		  
			childJob_tRunJob_23.parentContextMap = parentContextMap_tRunJob_23;
		  
		
		String[][] childReturn_tRunJob_23 = childJob_tRunJob_23.runJob((String[]) paraList_tRunJob_23.toArray(new String[paraList_tRunJob_23.size()]));
		
            if(childJob_tRunJob_23.getErrorCode() == null){
                globalMap.put("tRunJob_23_CHILD_RETURN_CODE", childJob_tRunJob_23.getStatus() != null && ("failure").equals(childJob_tRunJob_23.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_23_CHILD_RETURN_CODE", childJob_tRunJob_23.getErrorCode());
            }
            if (childJob_tRunJob_23.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_23_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_23.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_23.getErrorCode();
                if (childJob_tRunJob_23.getErrorCode() != null || ("failure").equals(childJob_tRunJob_23.getStatus())) {
                    java.lang.Exception ce_tRunJob_23 = childJob_tRunJob_23.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_23!=null) ? (ce_tRunJob_23.getClass().getName() + ": " + ce_tRunJob_23.getMessage()) : ""));
                }

 


	tos_count_tRunJob_23++;

/**
 * [tRunJob_23 main ] stop
 */
	
	/**
	 * [tRunJob_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_23";

	

 



/**
 * [tRunJob_23 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_23";

	

 



/**
 * [tRunJob_23 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_23 end ] start
	 */

	

	
	
	currentComponent="tRunJob_23";

	

 

ok_Hash.put("tRunJob_23", true);
end_Hash.put("tRunJob_23", System.currentTimeMillis());




/**
 * [tRunJob_23 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_23 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_23";

	

 



/**
 * [tRunJob_23 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_23_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_6", false);
		start_Hash.put("tRunJob_6", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_6";

	
		int tos_count_tRunJob_6 = 0;
		


 



/**
 * [tRunJob_6 begin ] stop
 */
	
	/**
	 * [tRunJob_6 main ] start
	 */

	

	
	
	currentComponent="tRunJob_6";

	
	java.util.List<String> paraList_tRunJob_6 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_6.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_6.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_6.add("--father_node=tRunJob_6");
	      			
	        			paraList_tRunJob_6.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_6.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_6.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_6.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_6 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_6 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_6".equals(tRunJobName_tRunJob_6) && childResumePath_tRunJob_6 != null){
		paraList_tRunJob_6.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_6.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_6");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_6 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_6 = null;

	
	
		bigdata_project.prof_extrac_0_1.Prof_Extrac childJob_tRunJob_6 = new bigdata_project.prof_extrac_0_1.Prof_Extrac();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_6 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_6) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_6 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_6 : talendDataSources_tRunJob_6
			        .entrySet()) {
	            dataSources_tRunJob_6.put(talendDataSourceEntry_tRunJob_6.getKey(),
	                    talendDataSourceEntry_tRunJob_6.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_6.setDataSources(dataSources_tRunJob_6);
	    }
		  
			childJob_tRunJob_6.parentContextMap = parentContextMap_tRunJob_6;
		  
		
		String[][] childReturn_tRunJob_6 = childJob_tRunJob_6.runJob((String[]) paraList_tRunJob_6.toArray(new String[paraList_tRunJob_6.size()]));
		
            if(childJob_tRunJob_6.getErrorCode() == null){
                globalMap.put("tRunJob_6_CHILD_RETURN_CODE", childJob_tRunJob_6.getStatus() != null && ("failure").equals(childJob_tRunJob_6.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_6_CHILD_RETURN_CODE", childJob_tRunJob_6.getErrorCode());
            }
            if (childJob_tRunJob_6.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_6_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_6.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_6.getErrorCode();
                if (childJob_tRunJob_6.getErrorCode() != null || ("failure").equals(childJob_tRunJob_6.getStatus())) {
                    java.lang.Exception ce_tRunJob_6 = childJob_tRunJob_6.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_6!=null) ? (ce_tRunJob_6.getClass().getName() + ": " + ce_tRunJob_6.getMessage()) : ""));
                }

 


	tos_count_tRunJob_6++;

/**
 * [tRunJob_6 main ] stop
 */
	
	/**
	 * [tRunJob_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_6";

	

 



/**
 * [tRunJob_6 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_6";

	

 



/**
 * [tRunJob_6 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_6 end ] start
	 */

	

	
	
	currentComponent="tRunJob_6";

	

 

ok_Hash.put("tRunJob_6", true);
end_Hash.put("tRunJob_6", System.currentTimeMillis());




/**
 * [tRunJob_6 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk19", 0, "ok");
								} 
							
							tRunJob_27Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_6 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_6";

	

 



/**
 * [tRunJob_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_6_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_27Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_27_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_27", false);
		start_Hash.put("tRunJob_27", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_27";

	
		int tos_count_tRunJob_27 = 0;
		


 



/**
 * [tRunJob_27 begin ] stop
 */
	
	/**
	 * [tRunJob_27 main ] start
	 */

	

	
	
	currentComponent="tRunJob_27";

	
	java.util.List<String> paraList_tRunJob_27 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_27.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_27.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_27.add("--father_node=tRunJob_27");
	      			
	        			paraList_tRunJob_27.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_27.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_27.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_27.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_27 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_27 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_27".equals(tRunJobName_tRunJob_27) && childResumePath_tRunJob_27 != null){
		paraList_tRunJob_27.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_27.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_27");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_27 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_27 = null;

	
	
		bigdata_project.dim_prof_0_1.Dim_Prof childJob_tRunJob_27 = new bigdata_project.dim_prof_0_1.Dim_Prof();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_27 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_27) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_27 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_27 : talendDataSources_tRunJob_27
			        .entrySet()) {
	            dataSources_tRunJob_27.put(talendDataSourceEntry_tRunJob_27.getKey(),
	                    talendDataSourceEntry_tRunJob_27.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_27.setDataSources(dataSources_tRunJob_27);
	    }
		  
			childJob_tRunJob_27.parentContextMap = parentContextMap_tRunJob_27;
		  
		
		String[][] childReturn_tRunJob_27 = childJob_tRunJob_27.runJob((String[]) paraList_tRunJob_27.toArray(new String[paraList_tRunJob_27.size()]));
		
            if(childJob_tRunJob_27.getErrorCode() == null){
                globalMap.put("tRunJob_27_CHILD_RETURN_CODE", childJob_tRunJob_27.getStatus() != null && ("failure").equals(childJob_tRunJob_27.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_27_CHILD_RETURN_CODE", childJob_tRunJob_27.getErrorCode());
            }
            if (childJob_tRunJob_27.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_27_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_27.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_27.getErrorCode();
                if (childJob_tRunJob_27.getErrorCode() != null || ("failure").equals(childJob_tRunJob_27.getStatus())) {
                    java.lang.Exception ce_tRunJob_27 = childJob_tRunJob_27.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_27!=null) ? (ce_tRunJob_27.getClass().getName() + ": " + ce_tRunJob_27.getMessage()) : ""));
                }

 


	tos_count_tRunJob_27++;

/**
 * [tRunJob_27 main ] stop
 */
	
	/**
	 * [tRunJob_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_27";

	

 



/**
 * [tRunJob_27 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_27";

	

 



/**
 * [tRunJob_27 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_27 end ] start
	 */

	

	
	
	currentComponent="tRunJob_27";

	

 

ok_Hash.put("tRunJob_27", true);
end_Hash.put("tRunJob_27", System.currentTimeMillis());




/**
 * [tRunJob_27 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_27 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_27";

	

 



/**
 * [tRunJob_27 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_27_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_7", false);
		start_Hash.put("tRunJob_7", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_7";

	
		int tos_count_tRunJob_7 = 0;
		


 



/**
 * [tRunJob_7 begin ] stop
 */
	
	/**
	 * [tRunJob_7 main ] start
	 */

	

	
	
	currentComponent="tRunJob_7";

	
	java.util.List<String> paraList_tRunJob_7 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_7.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_7.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_7.add("--father_node=tRunJob_7");
	      			
	        			paraList_tRunJob_7.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_7.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_7.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_7.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_7 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_7 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_7".equals(tRunJobName_tRunJob_7) && childResumePath_tRunJob_7 != null){
		paraList_tRunJob_7.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_7.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_7");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_7 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_7 = null;

	
	
		bigdata_project.rdv_extrac_0_1.RDV_Extrac childJob_tRunJob_7 = new bigdata_project.rdv_extrac_0_1.RDV_Extrac();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_7 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_7) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_7 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_7 : talendDataSources_tRunJob_7
			        .entrySet()) {
	            dataSources_tRunJob_7.put(talendDataSourceEntry_tRunJob_7.getKey(),
	                    talendDataSourceEntry_tRunJob_7.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_7.setDataSources(dataSources_tRunJob_7);
	    }
		  
			childJob_tRunJob_7.parentContextMap = parentContextMap_tRunJob_7;
		  
		
		String[][] childReturn_tRunJob_7 = childJob_tRunJob_7.runJob((String[]) paraList_tRunJob_7.toArray(new String[paraList_tRunJob_7.size()]));
		
            if(childJob_tRunJob_7.getErrorCode() == null){
                globalMap.put("tRunJob_7_CHILD_RETURN_CODE", childJob_tRunJob_7.getStatus() != null && ("failure").equals(childJob_tRunJob_7.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_7_CHILD_RETURN_CODE", childJob_tRunJob_7.getErrorCode());
            }
            if (childJob_tRunJob_7.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_7_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_7.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_7.getErrorCode();
                if (childJob_tRunJob_7.getErrorCode() != null || ("failure").equals(childJob_tRunJob_7.getStatus())) {
                    java.lang.Exception ce_tRunJob_7 = childJob_tRunJob_7.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_7!=null) ? (ce_tRunJob_7.getClass().getName() + ": " + ce_tRunJob_7.getMessage()) : ""));
                }

 


	tos_count_tRunJob_7++;

/**
 * [tRunJob_7 main ] stop
 */
	
	/**
	 * [tRunJob_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_7";

	

 



/**
 * [tRunJob_7 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_7";

	

 



/**
 * [tRunJob_7 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_7 end ] start
	 */

	

	
	
	currentComponent="tRunJob_7";

	

 

ok_Hash.put("tRunJob_7", true);
end_Hash.put("tRunJob_7", System.currentTimeMillis());




/**
 * [tRunJob_7 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk24", 0, "ok");
								} 
							
							tRunJob_28Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_7 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_7";

	

 



/**
 * [tRunJob_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_7_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_28Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_28_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_28", false);
		start_Hash.put("tRunJob_28", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_28";

	
		int tos_count_tRunJob_28 = 0;
		


 



/**
 * [tRunJob_28 begin ] stop
 */
	
	/**
	 * [tRunJob_28 main ] start
	 */

	

	
	
	currentComponent="tRunJob_28";

	
	java.util.List<String> paraList_tRunJob_28 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_28.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_28.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_28.add("--father_node=tRunJob_28");
	      			
	        			paraList_tRunJob_28.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_28.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_28.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_28.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_28 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_28 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_28".equals(tRunJobName_tRunJob_28) && childResumePath_tRunJob_28 != null){
		paraList_tRunJob_28.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_28.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_28");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_28 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_28 = null;

	
	
		bigdata_project.stage_rdv_0_1.Stage_RDV childJob_tRunJob_28 = new bigdata_project.stage_rdv_0_1.Stage_RDV();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_28 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_28) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_28 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_28 : talendDataSources_tRunJob_28
			        .entrySet()) {
	            dataSources_tRunJob_28.put(talendDataSourceEntry_tRunJob_28.getKey(),
	                    talendDataSourceEntry_tRunJob_28.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_28.setDataSources(dataSources_tRunJob_28);
	    }
		  
			childJob_tRunJob_28.parentContextMap = parentContextMap_tRunJob_28;
		  
		
		String[][] childReturn_tRunJob_28 = childJob_tRunJob_28.runJob((String[]) paraList_tRunJob_28.toArray(new String[paraList_tRunJob_28.size()]));
		
            if(childJob_tRunJob_28.getErrorCode() == null){
                globalMap.put("tRunJob_28_CHILD_RETURN_CODE", childJob_tRunJob_28.getStatus() != null && ("failure").equals(childJob_tRunJob_28.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_28_CHILD_RETURN_CODE", childJob_tRunJob_28.getErrorCode());
            }
            if (childJob_tRunJob_28.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_28_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_28.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_28.getErrorCode();
                if (childJob_tRunJob_28.getErrorCode() != null || ("failure").equals(childJob_tRunJob_28.getStatus())) {
                    java.lang.Exception ce_tRunJob_28 = childJob_tRunJob_28.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_28!=null) ? (ce_tRunJob_28.getClass().getName() + ": " + ce_tRunJob_28.getMessage()) : ""));
                }

 


	tos_count_tRunJob_28++;

/**
 * [tRunJob_28 main ] stop
 */
	
	/**
	 * [tRunJob_28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_28";

	

 



/**
 * [tRunJob_28 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_28 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_28";

	

 



/**
 * [tRunJob_28 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_28 end ] start
	 */

	

	
	
	currentComponent="tRunJob_28";

	

 

ok_Hash.put("tRunJob_28", true);
end_Hash.put("tRunJob_28", System.currentTimeMillis());




/**
 * [tRunJob_28 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_28:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk25", 0, "ok");
								} 
							
							tRunJob_29Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_28 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_28";

	

 



/**
 * [tRunJob_28 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_28_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_29Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_29_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_29 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_29", false);
		start_Hash.put("tRunJob_29", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_29";

	
		int tos_count_tRunJob_29 = 0;
		


 



/**
 * [tRunJob_29 begin ] stop
 */
	
	/**
	 * [tRunJob_29 main ] start
	 */

	

	
	
	currentComponent="tRunJob_29";

	
	java.util.List<String> paraList_tRunJob_29 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_29.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_29.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_29.add("--father_node=tRunJob_29");
	      			
	        			paraList_tRunJob_29.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_29.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_29.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_29.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_29 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_29 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_29".equals(tRunJobName_tRunJob_29) && childResumePath_tRunJob_29 != null){
		paraList_tRunJob_29.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_29.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_29");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_29 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_29 = null;

	
	
		bigdata_project.dim_rdv_0_1.Dim_RDV childJob_tRunJob_29 = new bigdata_project.dim_rdv_0_1.Dim_RDV();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_29 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_29) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_29 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_29 : talendDataSources_tRunJob_29
			        .entrySet()) {
	            dataSources_tRunJob_29.put(talendDataSourceEntry_tRunJob_29.getKey(),
	                    talendDataSourceEntry_tRunJob_29.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_29.setDataSources(dataSources_tRunJob_29);
	    }
		  
			childJob_tRunJob_29.parentContextMap = parentContextMap_tRunJob_29;
		  
		
		String[][] childReturn_tRunJob_29 = childJob_tRunJob_29.runJob((String[]) paraList_tRunJob_29.toArray(new String[paraList_tRunJob_29.size()]));
		
            if(childJob_tRunJob_29.getErrorCode() == null){
                globalMap.put("tRunJob_29_CHILD_RETURN_CODE", childJob_tRunJob_29.getStatus() != null && ("failure").equals(childJob_tRunJob_29.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_29_CHILD_RETURN_CODE", childJob_tRunJob_29.getErrorCode());
            }
            if (childJob_tRunJob_29.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_29_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_29.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_29.getErrorCode();
                if (childJob_tRunJob_29.getErrorCode() != null || ("failure").equals(childJob_tRunJob_29.getStatus())) {
                    java.lang.Exception ce_tRunJob_29 = childJob_tRunJob_29.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_29!=null) ? (ce_tRunJob_29.getClass().getName() + ": " + ce_tRunJob_29.getMessage()) : ""));
                }

 


	tos_count_tRunJob_29++;

/**
 * [tRunJob_29 main ] stop
 */
	
	/**
	 * [tRunJob_29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_29";

	

 



/**
 * [tRunJob_29 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_29 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_29";

	

 



/**
 * [tRunJob_29 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_29 end ] start
	 */

	

	
	
	currentComponent="tRunJob_29";

	

 

ok_Hash.put("tRunJob_29", true);
end_Hash.put("tRunJob_29", System.currentTimeMillis());




/**
 * [tRunJob_29 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_29 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_29";

	

 



/**
 * [tRunJob_29 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_29_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_8", false);
		start_Hash.put("tRunJob_8", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_8";

	
		int tos_count_tRunJob_8 = 0;
		


 



/**
 * [tRunJob_8 begin ] stop
 */
	
	/**
	 * [tRunJob_8 main ] start
	 */

	

	
	
	currentComponent="tRunJob_8";

	
	java.util.List<String> paraList_tRunJob_8 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_8.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_8.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_8.add("--father_node=tRunJob_8");
	      			
	        			paraList_tRunJob_8.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_8.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_8.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_8.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_8 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_8 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_8".equals(tRunJobName_tRunJob_8) && childResumePath_tRunJob_8 != null){
		paraList_tRunJob_8.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_8.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_8");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_8 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_8 = null;

	
	
		bigdata_project.etab_extrac_0_1.Etab_Extrac childJob_tRunJob_8 = new bigdata_project.etab_extrac_0_1.Etab_Extrac();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_8 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_8) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_8 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_8 : talendDataSources_tRunJob_8
			        .entrySet()) {
	            dataSources_tRunJob_8.put(talendDataSourceEntry_tRunJob_8.getKey(),
	                    talendDataSourceEntry_tRunJob_8.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_8.setDataSources(dataSources_tRunJob_8);
	    }
		  
			childJob_tRunJob_8.parentContextMap = parentContextMap_tRunJob_8;
		  
		
		String[][] childReturn_tRunJob_8 = childJob_tRunJob_8.runJob((String[]) paraList_tRunJob_8.toArray(new String[paraList_tRunJob_8.size()]));
		
            if(childJob_tRunJob_8.getErrorCode() == null){
                globalMap.put("tRunJob_8_CHILD_RETURN_CODE", childJob_tRunJob_8.getStatus() != null && ("failure").equals(childJob_tRunJob_8.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_8_CHILD_RETURN_CODE", childJob_tRunJob_8.getErrorCode());
            }
            if (childJob_tRunJob_8.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_8_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_8.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_8.getErrorCode();
                if (childJob_tRunJob_8.getErrorCode() != null || ("failure").equals(childJob_tRunJob_8.getStatus())) {
                    java.lang.Exception ce_tRunJob_8 = childJob_tRunJob_8.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_8!=null) ? (ce_tRunJob_8.getClass().getName() + ": " + ce_tRunJob_8.getMessage()) : ""));
                }

 


	tos_count_tRunJob_8++;

/**
 * [tRunJob_8 main ] stop
 */
	
	/**
	 * [tRunJob_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_8";

	

 



/**
 * [tRunJob_8 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_8";

	

 



/**
 * [tRunJob_8 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_8 end ] start
	 */

	

	
	
	currentComponent="tRunJob_8";

	

 

ok_Hash.put("tRunJob_8", true);
end_Hash.put("tRunJob_8", System.currentTimeMillis());




/**
 * [tRunJob_8 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_8:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
								} 
							
							tRunJob_21Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_8 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_8";

	

 



/**
 * [tRunJob_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_8_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_21Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_21_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_21", false);
		start_Hash.put("tRunJob_21", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_21";

	
		int tos_count_tRunJob_21 = 0;
		


 



/**
 * [tRunJob_21 begin ] stop
 */
	
	/**
	 * [tRunJob_21 main ] start
	 */

	

	
	
	currentComponent="tRunJob_21";

	
	java.util.List<String> paraList_tRunJob_21 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_21.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_21.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_21.add("--father_node=tRunJob_21");
	      			
	        			paraList_tRunJob_21.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_21.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_21.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_21.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_21 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_21 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_21".equals(tRunJobName_tRunJob_21) && childResumePath_tRunJob_21 != null){
		paraList_tRunJob_21.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_21.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_21");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_21 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_21 = null;

	
	
		bigdata_project.dim_etablissement_0_1.Dim_Etablissement childJob_tRunJob_21 = new bigdata_project.dim_etablissement_0_1.Dim_Etablissement();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_21 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_21) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_21 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_21 : talendDataSources_tRunJob_21
			        .entrySet()) {
	            dataSources_tRunJob_21.put(talendDataSourceEntry_tRunJob_21.getKey(),
	                    talendDataSourceEntry_tRunJob_21.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_21.setDataSources(dataSources_tRunJob_21);
	    }
		  
			childJob_tRunJob_21.parentContextMap = parentContextMap_tRunJob_21;
		  
		
		String[][] childReturn_tRunJob_21 = childJob_tRunJob_21.runJob((String[]) paraList_tRunJob_21.toArray(new String[paraList_tRunJob_21.size()]));
		
            if(childJob_tRunJob_21.getErrorCode() == null){
                globalMap.put("tRunJob_21_CHILD_RETURN_CODE", childJob_tRunJob_21.getStatus() != null && ("failure").equals(childJob_tRunJob_21.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_21_CHILD_RETURN_CODE", childJob_tRunJob_21.getErrorCode());
            }
            if (childJob_tRunJob_21.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_21_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_21.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_21.getErrorCode();
                if (childJob_tRunJob_21.getErrorCode() != null || ("failure").equals(childJob_tRunJob_21.getStatus())) {
                    java.lang.Exception ce_tRunJob_21 = childJob_tRunJob_21.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_21!=null) ? (ce_tRunJob_21.getClass().getName() + ": " + ce_tRunJob_21.getMessage()) : ""));
                }

 


	tos_count_tRunJob_21++;

/**
 * [tRunJob_21 main ] stop
 */
	
	/**
	 * [tRunJob_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_21";

	

 



/**
 * [tRunJob_21 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_21";

	

 



/**
 * [tRunJob_21 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_21 end ] start
	 */

	

	
	
	currentComponent="tRunJob_21";

	

 

ok_Hash.put("tRunJob_21", true);
end_Hash.put("tRunJob_21", System.currentTimeMillis());




/**
 * [tRunJob_21 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_21 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_21";

	

 



/**
 * [tRunJob_21 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_21_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_9", false);
		start_Hash.put("tRunJob_9", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_9";

	
		int tos_count_tRunJob_9 = 0;
		


 



/**
 * [tRunJob_9 begin ] stop
 */
	
	/**
	 * [tRunJob_9 main ] start
	 */

	

	
	
	currentComponent="tRunJob_9";

	
	java.util.List<String> paraList_tRunJob_9 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_9.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_9.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_9.add("--father_node=tRunJob_9");
	      			
	        			paraList_tRunJob_9.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_9.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_9.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_9.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_9 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_9 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_9".equals(tRunJobName_tRunJob_9) && childResumePath_tRunJob_9 != null){
		paraList_tRunJob_9.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_9.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_9");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_9 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_9 = null;

	
	
		bigdata_project.region_extrac_0_1.Region_Extrac childJob_tRunJob_9 = new bigdata_project.region_extrac_0_1.Region_Extrac();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_9 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_9) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_9 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_9 : talendDataSources_tRunJob_9
			        .entrySet()) {
	            dataSources_tRunJob_9.put(talendDataSourceEntry_tRunJob_9.getKey(),
	                    talendDataSourceEntry_tRunJob_9.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_9.setDataSources(dataSources_tRunJob_9);
	    }
		  
			childJob_tRunJob_9.parentContextMap = parentContextMap_tRunJob_9;
		  
		
		String[][] childReturn_tRunJob_9 = childJob_tRunJob_9.runJob((String[]) paraList_tRunJob_9.toArray(new String[paraList_tRunJob_9.size()]));
		
            if(childJob_tRunJob_9.getErrorCode() == null){
                globalMap.put("tRunJob_9_CHILD_RETURN_CODE", childJob_tRunJob_9.getStatus() != null && ("failure").equals(childJob_tRunJob_9.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_9_CHILD_RETURN_CODE", childJob_tRunJob_9.getErrorCode());
            }
            if (childJob_tRunJob_9.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_9_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_9.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_9.getErrorCode();
                if (childJob_tRunJob_9.getErrorCode() != null || ("failure").equals(childJob_tRunJob_9.getStatus())) {
                    java.lang.Exception ce_tRunJob_9 = childJob_tRunJob_9.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_9!=null) ? (ce_tRunJob_9.getClass().getName() + ": " + ce_tRunJob_9.getMessage()) : ""));
                }

 


	tos_count_tRunJob_9++;

/**
 * [tRunJob_9 main ] stop
 */
	
	/**
	 * [tRunJob_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_9";

	

 



/**
 * [tRunJob_9 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_9";

	

 



/**
 * [tRunJob_9 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_9 end ] start
	 */

	

	
	
	currentComponent="tRunJob_9";

	

 

ok_Hash.put("tRunJob_9", true);
end_Hash.put("tRunJob_9", System.currentTimeMillis());




/**
 * [tRunJob_9 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_9:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tRunJob_18Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_9 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_9";

	

 



/**
 * [tRunJob_9 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_9_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_18", false);
		start_Hash.put("tRunJob_18", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_18";

	
		int tos_count_tRunJob_18 = 0;
		


 



/**
 * [tRunJob_18 begin ] stop
 */
	
	/**
	 * [tRunJob_18 main ] start
	 */

	

	
	
	currentComponent="tRunJob_18";

	
	java.util.List<String> paraList_tRunJob_18 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_18.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_18.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_18.add("--father_node=tRunJob_18");
	      			
	        			paraList_tRunJob_18.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_18.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_18.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_18.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_18 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_18 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_18".equals(tRunJobName_tRunJob_18) && childResumePath_tRunJob_18 != null){
		paraList_tRunJob_18.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_18.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_18");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_18 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_18 = null;

	
	
		bigdata_project.dim_region_0_1.Dim_Region childJob_tRunJob_18 = new bigdata_project.dim_region_0_1.Dim_Region();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_18 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_18) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_18 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_18 : talendDataSources_tRunJob_18
			        .entrySet()) {
	            dataSources_tRunJob_18.put(talendDataSourceEntry_tRunJob_18.getKey(),
	                    talendDataSourceEntry_tRunJob_18.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_18.setDataSources(dataSources_tRunJob_18);
	    }
		  
			childJob_tRunJob_18.parentContextMap = parentContextMap_tRunJob_18;
		  
		
		String[][] childReturn_tRunJob_18 = childJob_tRunJob_18.runJob((String[]) paraList_tRunJob_18.toArray(new String[paraList_tRunJob_18.size()]));
		
            if(childJob_tRunJob_18.getErrorCode() == null){
                globalMap.put("tRunJob_18_CHILD_RETURN_CODE", childJob_tRunJob_18.getStatus() != null && ("failure").equals(childJob_tRunJob_18.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_18_CHILD_RETURN_CODE", childJob_tRunJob_18.getErrorCode());
            }
            if (childJob_tRunJob_18.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_18_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_18.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_18.getErrorCode();
                if (childJob_tRunJob_18.getErrorCode() != null || ("failure").equals(childJob_tRunJob_18.getStatus())) {
                    java.lang.Exception ce_tRunJob_18 = childJob_tRunJob_18.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_18!=null) ? (ce_tRunJob_18.getClass().getName() + ": " + ce_tRunJob_18.getMessage()) : ""));
                }

 


	tos_count_tRunJob_18++;

/**
 * [tRunJob_18 main ] stop
 */
	
	/**
	 * [tRunJob_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_18";

	

 



/**
 * [tRunJob_18 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_18";

	

 



/**
 * [tRunJob_18 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_18 end ] start
	 */

	

	
	
	currentComponent="tRunJob_18";

	

 

ok_Hash.put("tRunJob_18", true);
end_Hash.put("tRunJob_18", System.currentTimeMillis());




/**
 * [tRunJob_18 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_18 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_18";

	

 



/**
 * [tRunJob_18 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_18_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_10", false);
		start_Hash.put("tRunJob_10", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_10";

	
		int tos_count_tRunJob_10 = 0;
		


 



/**
 * [tRunJob_10 begin ] stop
 */
	
	/**
	 * [tRunJob_10 main ] start
	 */

	

	
	
	currentComponent="tRunJob_10";

	
	java.util.List<String> paraList_tRunJob_10 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_10.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_10.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_10.add("--father_node=tRunJob_10");
	      			
	        			paraList_tRunJob_10.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_10.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_10.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_10.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_10 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_10 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_10".equals(tRunJobName_tRunJob_10) && childResumePath_tRunJob_10 != null){
		paraList_tRunJob_10.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_10.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_10");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_10 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_10 = null;

	
	
		bigdata_project.esatis_e_0_1.esatis_E childJob_tRunJob_10 = new bigdata_project.esatis_e_0_1.esatis_E();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_10 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_10) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_10 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_10 : talendDataSources_tRunJob_10
			        .entrySet()) {
	            dataSources_tRunJob_10.put(talendDataSourceEntry_tRunJob_10.getKey(),
	                    talendDataSourceEntry_tRunJob_10.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_10.setDataSources(dataSources_tRunJob_10);
	    }
		  
			childJob_tRunJob_10.parentContextMap = parentContextMap_tRunJob_10;
		  
		
		String[][] childReturn_tRunJob_10 = childJob_tRunJob_10.runJob((String[]) paraList_tRunJob_10.toArray(new String[paraList_tRunJob_10.size()]));
		
            if(childJob_tRunJob_10.getErrorCode() == null){
                globalMap.put("tRunJob_10_CHILD_RETURN_CODE", childJob_tRunJob_10.getStatus() != null && ("failure").equals(childJob_tRunJob_10.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_10_CHILD_RETURN_CODE", childJob_tRunJob_10.getErrorCode());
            }
            if (childJob_tRunJob_10.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_10_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_10.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_10.getErrorCode();
                if (childJob_tRunJob_10.getErrorCode() != null || ("failure").equals(childJob_tRunJob_10.getStatus())) {
                    java.lang.Exception ce_tRunJob_10 = childJob_tRunJob_10.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_10!=null) ? (ce_tRunJob_10.getClass().getName() + ": " + ce_tRunJob_10.getMessage()) : ""));
                }

 


	tos_count_tRunJob_10++;

/**
 * [tRunJob_10 main ] stop
 */
	
	/**
	 * [tRunJob_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_10";

	

 



/**
 * [tRunJob_10 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_10";

	

 



/**
 * [tRunJob_10 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_10 end ] start
	 */

	

	
	
	currentComponent="tRunJob_10";

	

 

ok_Hash.put("tRunJob_10", true);
end_Hash.put("tRunJob_10", System.currentTimeMillis());




/**
 * [tRunJob_10 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_10:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tRunJob_19Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_10 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_10";

	

 



/**
 * [tRunJob_10 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_10_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_19_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_19", false);
		start_Hash.put("tRunJob_19", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_19";

	
		int tos_count_tRunJob_19 = 0;
		


 



/**
 * [tRunJob_19 begin ] stop
 */
	
	/**
	 * [tRunJob_19 main ] start
	 */

	

	
	
	currentComponent="tRunJob_19";

	
	java.util.List<String> paraList_tRunJob_19 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_19.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_19.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_19.add("--father_node=tRunJob_19");
	      			
	        			paraList_tRunJob_19.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_19.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_19.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_19.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_19 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_19 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_19".equals(tRunJobName_tRunJob_19) && childResumePath_tRunJob_19 != null){
		paraList_tRunJob_19.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_19.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_19");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_19 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_19 = null;

	
	
		bigdata_project.stage_sati_0_1.Stage_Sati childJob_tRunJob_19 = new bigdata_project.stage_sati_0_1.Stage_Sati();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_19 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_19) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_19 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_19 : talendDataSources_tRunJob_19
			        .entrySet()) {
	            dataSources_tRunJob_19.put(talendDataSourceEntry_tRunJob_19.getKey(),
	                    talendDataSourceEntry_tRunJob_19.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_19.setDataSources(dataSources_tRunJob_19);
	    }
		  
			childJob_tRunJob_19.parentContextMap = parentContextMap_tRunJob_19;
		  
		
		String[][] childReturn_tRunJob_19 = childJob_tRunJob_19.runJob((String[]) paraList_tRunJob_19.toArray(new String[paraList_tRunJob_19.size()]));
		
            if(childJob_tRunJob_19.getErrorCode() == null){
                globalMap.put("tRunJob_19_CHILD_RETURN_CODE", childJob_tRunJob_19.getStatus() != null && ("failure").equals(childJob_tRunJob_19.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_19_CHILD_RETURN_CODE", childJob_tRunJob_19.getErrorCode());
            }
            if (childJob_tRunJob_19.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_19_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_19.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_19.getErrorCode();
                if (childJob_tRunJob_19.getErrorCode() != null || ("failure").equals(childJob_tRunJob_19.getStatus())) {
                    java.lang.Exception ce_tRunJob_19 = childJob_tRunJob_19.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_19!=null) ? (ce_tRunJob_19.getClass().getName() + ": " + ce_tRunJob_19.getMessage()) : ""));
                }

 


	tos_count_tRunJob_19++;

/**
 * [tRunJob_19 main ] stop
 */
	
	/**
	 * [tRunJob_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_19";

	

 



/**
 * [tRunJob_19 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_19";

	

 



/**
 * [tRunJob_19 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_19 end ] start
	 */

	

	
	
	currentComponent="tRunJob_19";

	

 

ok_Hash.put("tRunJob_19", true);
end_Hash.put("tRunJob_19", System.currentTimeMillis());




/**
 * [tRunJob_19 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_19:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
								} 
							
							tRunJob_20Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_19 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_19";

	

 



/**
 * [tRunJob_19 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_19_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_20Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_20_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_20", false);
		start_Hash.put("tRunJob_20", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_20";

	
		int tos_count_tRunJob_20 = 0;
		


 



/**
 * [tRunJob_20 begin ] stop
 */
	
	/**
	 * [tRunJob_20 main ] start
	 */

	

	
	
	currentComponent="tRunJob_20";

	
	java.util.List<String> paraList_tRunJob_20 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_20.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_20.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_20.add("--father_node=tRunJob_20");
	      			
	        			paraList_tRunJob_20.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_20.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_20.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_20.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_20 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_20 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_20".equals(tRunJobName_tRunJob_20) && childResumePath_tRunJob_20 != null){
		paraList_tRunJob_20.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_20.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_20");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_20 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_20 = null;

	
	
		bigdata_project.fact_satisfaction_0_1.Fact_Satisfaction childJob_tRunJob_20 = new bigdata_project.fact_satisfaction_0_1.Fact_Satisfaction();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_20 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_20) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_20 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_20 : talendDataSources_tRunJob_20
			        .entrySet()) {
	            dataSources_tRunJob_20.put(talendDataSourceEntry_tRunJob_20.getKey(),
	                    talendDataSourceEntry_tRunJob_20.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_20.setDataSources(dataSources_tRunJob_20);
	    }
		  
			childJob_tRunJob_20.parentContextMap = parentContextMap_tRunJob_20;
		  
		
		String[][] childReturn_tRunJob_20 = childJob_tRunJob_20.runJob((String[]) paraList_tRunJob_20.toArray(new String[paraList_tRunJob_20.size()]));
		
            if(childJob_tRunJob_20.getErrorCode() == null){
                globalMap.put("tRunJob_20_CHILD_RETURN_CODE", childJob_tRunJob_20.getStatus() != null && ("failure").equals(childJob_tRunJob_20.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_20_CHILD_RETURN_CODE", childJob_tRunJob_20.getErrorCode());
            }
            if (childJob_tRunJob_20.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_20_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_20.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_20.getErrorCode();
                if (childJob_tRunJob_20.getErrorCode() != null || ("failure").equals(childJob_tRunJob_20.getStatus())) {
                    java.lang.Exception ce_tRunJob_20 = childJob_tRunJob_20.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_20!=null) ? (ce_tRunJob_20.getClass().getName() + ": " + ce_tRunJob_20.getMessage()) : ""));
                }

 


	tos_count_tRunJob_20++;

/**
 * [tRunJob_20 main ] stop
 */
	
	/**
	 * [tRunJob_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_20";

	

 



/**
 * [tRunJob_20 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_20";

	

 



/**
 * [tRunJob_20 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_20 end ] start
	 */

	

	
	
	currentComponent="tRunJob_20";

	

 

ok_Hash.put("tRunJob_20", true);
end_Hash.put("tRunJob_20", System.currentTimeMillis());




/**
 * [tRunJob_20 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_20 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_20";

	

 



/**
 * [tRunJob_20 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_20_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_11", false);
		start_Hash.put("tRunJob_11", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_11";

	
		int tos_count_tRunJob_11 = 0;
		


 



/**
 * [tRunJob_11 begin ] stop
 */
	
	/**
	 * [tRunJob_11 main ] start
	 */

	

	
	
	currentComponent="tRunJob_11";

	
	java.util.List<String> paraList_tRunJob_11 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_11.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_11.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_11.add("--father_node=tRunJob_11");
	      			
	        			paraList_tRunJob_11.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_11.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_11.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_11.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_11 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_11 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_11".equals(tRunJobName_tRunJob_11) && childResumePath_tRunJob_11 != null){
		paraList_tRunJob_11.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_11.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_11");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_11 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_11 = null;

	
	
		bigdata_project.extract_visite_0_1.Extract_Visite childJob_tRunJob_11 = new bigdata_project.extract_visite_0_1.Extract_Visite();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_11 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_11) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_11 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_11 : talendDataSources_tRunJob_11
			        .entrySet()) {
	            dataSources_tRunJob_11.put(talendDataSourceEntry_tRunJob_11.getKey(),
	                    talendDataSourceEntry_tRunJob_11.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_11.setDataSources(dataSources_tRunJob_11);
	    }
		  
			childJob_tRunJob_11.parentContextMap = parentContextMap_tRunJob_11;
		  
		
		String[][] childReturn_tRunJob_11 = childJob_tRunJob_11.runJob((String[]) paraList_tRunJob_11.toArray(new String[paraList_tRunJob_11.size()]));
		
            if(childJob_tRunJob_11.getErrorCode() == null){
                globalMap.put("tRunJob_11_CHILD_RETURN_CODE", childJob_tRunJob_11.getStatus() != null && ("failure").equals(childJob_tRunJob_11.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_11_CHILD_RETURN_CODE", childJob_tRunJob_11.getErrorCode());
            }
            if (childJob_tRunJob_11.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_11_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_11.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_11.getErrorCode();
                if (childJob_tRunJob_11.getErrorCode() != null || ("failure").equals(childJob_tRunJob_11.getStatus())) {
                    java.lang.Exception ce_tRunJob_11 = childJob_tRunJob_11.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_11!=null) ? (ce_tRunJob_11.getClass().getName() + ": " + ce_tRunJob_11.getMessage()) : ""));
                }

 


	tos_count_tRunJob_11++;

/**
 * [tRunJob_11 main ] stop
 */
	
	/**
	 * [tRunJob_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_11";

	

 



/**
 * [tRunJob_11 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_11";

	

 



/**
 * [tRunJob_11 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_11 end ] start
	 */

	

	
	
	currentComponent="tRunJob_11";

	

 

ok_Hash.put("tRunJob_11", true);
end_Hash.put("tRunJob_11", System.currentTimeMillis());




/**
 * [tRunJob_11 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_11:OnSubjobOk1", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tRunJob_12Process(globalMap); 
						
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_11:OnSubjobOk2", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tRunJob_14Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_11 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_11";

	

 



/**
 * [tRunJob_11 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_11_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_12", false);
		start_Hash.put("tRunJob_12", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_12";

	
		int tos_count_tRunJob_12 = 0;
		


 



/**
 * [tRunJob_12 begin ] stop
 */
	
	/**
	 * [tRunJob_12 main ] start
	 */

	

	
	
	currentComponent="tRunJob_12";

	
	java.util.List<String> paraList_tRunJob_12 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_12.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_12.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_12.add("--father_node=tRunJob_12");
	      			
	        			paraList_tRunJob_12.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_12.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_12.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_12.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_12 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_12 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_12".equals(tRunJobName_tRunJob_12) && childResumePath_tRunJob_12 != null){
		paraList_tRunJob_12.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_12.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_12");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_12 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_12 = null;

	
	
		bigdata_project.staging_visite_0_1.Staging_Visite childJob_tRunJob_12 = new bigdata_project.staging_visite_0_1.Staging_Visite();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_12 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_12) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_12 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_12 : talendDataSources_tRunJob_12
			        .entrySet()) {
	            dataSources_tRunJob_12.put(talendDataSourceEntry_tRunJob_12.getKey(),
	                    talendDataSourceEntry_tRunJob_12.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_12.setDataSources(dataSources_tRunJob_12);
	    }
		  
			childJob_tRunJob_12.parentContextMap = parentContextMap_tRunJob_12;
		  
		
		String[][] childReturn_tRunJob_12 = childJob_tRunJob_12.runJob((String[]) paraList_tRunJob_12.toArray(new String[paraList_tRunJob_12.size()]));
		
            if(childJob_tRunJob_12.getErrorCode() == null){
                globalMap.put("tRunJob_12_CHILD_RETURN_CODE", childJob_tRunJob_12.getStatus() != null && ("failure").equals(childJob_tRunJob_12.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_12_CHILD_RETURN_CODE", childJob_tRunJob_12.getErrorCode());
            }
            if (childJob_tRunJob_12.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_12_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_12.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_12.getErrorCode();
                if (childJob_tRunJob_12.getErrorCode() != null || ("failure").equals(childJob_tRunJob_12.getStatus())) {
                    java.lang.Exception ce_tRunJob_12 = childJob_tRunJob_12.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_12!=null) ? (ce_tRunJob_12.getClass().getName() + ": " + ce_tRunJob_12.getMessage()) : ""));
                }

 


	tos_count_tRunJob_12++;

/**
 * [tRunJob_12 main ] stop
 */
	
	/**
	 * [tRunJob_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_12";

	

 



/**
 * [tRunJob_12 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_12";

	

 



/**
 * [tRunJob_12 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_12 end ] start
	 */

	

	
	
	currentComponent="tRunJob_12";

	

 

ok_Hash.put("tRunJob_12", true);
end_Hash.put("tRunJob_12", System.currentTimeMillis());




/**
 * [tRunJob_12 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_12:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tRunJob_13Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_12 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_12";

	

 



/**
 * [tRunJob_12 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_12_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_13", false);
		start_Hash.put("tRunJob_13", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_13";

	
		int tos_count_tRunJob_13 = 0;
		


 



/**
 * [tRunJob_13 begin ] stop
 */
	
	/**
	 * [tRunJob_13 main ] start
	 */

	

	
	
	currentComponent="tRunJob_13";

	
	java.util.List<String> paraList_tRunJob_13 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_13.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_13.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_13.add("--father_node=tRunJob_13");
	      			
	        			paraList_tRunJob_13.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_13.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_13.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_13.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_13 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_13 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_13".equals(tRunJobName_tRunJob_13) && childResumePath_tRunJob_13 != null){
		paraList_tRunJob_13.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_13.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_13");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_13 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_13 = null;

	
	
		bigdata_project.visite_0_1.Visite childJob_tRunJob_13 = new bigdata_project.visite_0_1.Visite();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_13 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_13) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_13 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_13 : talendDataSources_tRunJob_13
			        .entrySet()) {
	            dataSources_tRunJob_13.put(talendDataSourceEntry_tRunJob_13.getKey(),
	                    talendDataSourceEntry_tRunJob_13.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_13.setDataSources(dataSources_tRunJob_13);
	    }
		  
			childJob_tRunJob_13.parentContextMap = parentContextMap_tRunJob_13;
		  
		
		String[][] childReturn_tRunJob_13 = childJob_tRunJob_13.runJob((String[]) paraList_tRunJob_13.toArray(new String[paraList_tRunJob_13.size()]));
		
            if(childJob_tRunJob_13.getErrorCode() == null){
                globalMap.put("tRunJob_13_CHILD_RETURN_CODE", childJob_tRunJob_13.getStatus() != null && ("failure").equals(childJob_tRunJob_13.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_13_CHILD_RETURN_CODE", childJob_tRunJob_13.getErrorCode());
            }
            if (childJob_tRunJob_13.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_13_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_13.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_13.getErrorCode();
                if (childJob_tRunJob_13.getErrorCode() != null || ("failure").equals(childJob_tRunJob_13.getStatus())) {
                    java.lang.Exception ce_tRunJob_13 = childJob_tRunJob_13.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_13!=null) ? (ce_tRunJob_13.getClass().getName() + ": " + ce_tRunJob_13.getMessage()) : ""));
                }

 


	tos_count_tRunJob_13++;

/**
 * [tRunJob_13 main ] stop
 */
	
	/**
	 * [tRunJob_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_13";

	

 



/**
 * [tRunJob_13 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_13";

	

 



/**
 * [tRunJob_13 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_13 end ] start
	 */

	

	
	
	currentComponent="tRunJob_13";

	

 

ok_Hash.put("tRunJob_13", true);
end_Hash.put("tRunJob_13", System.currentTimeMillis());




/**
 * [tRunJob_13 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_13 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_13";

	

 



/**
 * [tRunJob_13 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_13_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_14", false);
		start_Hash.put("tRunJob_14", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_14";

	
		int tos_count_tRunJob_14 = 0;
		


 



/**
 * [tRunJob_14 begin ] stop
 */
	
	/**
	 * [tRunJob_14 main ] start
	 */

	

	
	
	currentComponent="tRunJob_14";

	
	java.util.List<String> paraList_tRunJob_14 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_14.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_14.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_14.add("--father_node=tRunJob_14");
	      			
	        			paraList_tRunJob_14.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_14.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_14.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_14.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_14 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_14 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_14".equals(tRunJobName_tRunJob_14) && childResumePath_tRunJob_14 != null){
		paraList_tRunJob_14.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_14.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_14");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_14 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_14 = null;

	
	
		bigdata_project.hospitalisation_0_1.Hospitalisation childJob_tRunJob_14 = new bigdata_project.hospitalisation_0_1.Hospitalisation();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_14 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_14) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_14 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_14 : talendDataSources_tRunJob_14
			        .entrySet()) {
	            dataSources_tRunJob_14.put(talendDataSourceEntry_tRunJob_14.getKey(),
	                    talendDataSourceEntry_tRunJob_14.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_14.setDataSources(dataSources_tRunJob_14);
	    }
		  
			childJob_tRunJob_14.parentContextMap = parentContextMap_tRunJob_14;
		  
		
		String[][] childReturn_tRunJob_14 = childJob_tRunJob_14.runJob((String[]) paraList_tRunJob_14.toArray(new String[paraList_tRunJob_14.size()]));
		
            if(childJob_tRunJob_14.getErrorCode() == null){
                globalMap.put("tRunJob_14_CHILD_RETURN_CODE", childJob_tRunJob_14.getStatus() != null && ("failure").equals(childJob_tRunJob_14.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_14_CHILD_RETURN_CODE", childJob_tRunJob_14.getErrorCode());
            }
            if (childJob_tRunJob_14.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_14_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_14.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_14.getErrorCode();
                if (childJob_tRunJob_14.getErrorCode() != null || ("failure").equals(childJob_tRunJob_14.getStatus())) {
                    java.lang.Exception ce_tRunJob_14 = childJob_tRunJob_14.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_14!=null) ? (ce_tRunJob_14.getClass().getName() + ": " + ce_tRunJob_14.getMessage()) : ""));
                }

 


	tos_count_tRunJob_14++;

/**
 * [tRunJob_14 main ] stop
 */
	
	/**
	 * [tRunJob_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_14";

	

 



/**
 * [tRunJob_14 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_14";

	

 



/**
 * [tRunJob_14 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_14 end ] start
	 */

	

	
	
	currentComponent="tRunJob_14";

	

 

ok_Hash.put("tRunJob_14", true);
end_Hash.put("tRunJob_14", System.currentTimeMillis());




/**
 * [tRunJob_14 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_14 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_14";

	

 



/**
 * [tRunJob_14 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_14_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		


 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        			paraList_tRunJob_1.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_1.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_1 = null;

	
	
		bigdata_project.hosconew_0_1.HoscoNew childJob_tRunJob_1 = new bigdata_project.hosconew_0_1.HoscoNew();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
            if(childJob_tRunJob_1.getErrorCode() == null){
                globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
            }
            if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_1.getErrorCode();
                if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
                    java.lang.Exception ce_tRunJob_1 = childJob_tRunJob_1.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_1!=null) ? (ce_tRunJob_1.getClass().getName() + ": " + ce_tRunJob_1.getMessage()) : ""));
                }

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk16", 0, "ok");
								} 
							
							tRunJob_24Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_24Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_24_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_24", false);
		start_Hash.put("tRunJob_24", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_24";

	
		int tos_count_tRunJob_24 = 0;
		


 



/**
 * [tRunJob_24 begin ] stop
 */
	
	/**
	 * [tRunJob_24 main ] start
	 */

	

	
	
	currentComponent="tRunJob_24";

	
	java.util.List<String> paraList_tRunJob_24 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_24.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_24.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_24.add("--father_node=tRunJob_24");
	      			
	        			paraList_tRunJob_24.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_24.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_24.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_24.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_24 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_24 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_24".equals(tRunJobName_tRunJob_24) && childResumePath_tRunJob_24 != null){
		paraList_tRunJob_24.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_24.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_24");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_24 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_24 = null;

	
	
		bigdata_project.stage_hosco_0_1.Stage_Hosco childJob_tRunJob_24 = new bigdata_project.stage_hosco_0_1.Stage_Hosco();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_24 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_24) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_24 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_24 : talendDataSources_tRunJob_24
			        .entrySet()) {
	            dataSources_tRunJob_24.put(talendDataSourceEntry_tRunJob_24.getKey(),
	                    talendDataSourceEntry_tRunJob_24.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_24.setDataSources(dataSources_tRunJob_24);
	    }
		  
			childJob_tRunJob_24.parentContextMap = parentContextMap_tRunJob_24;
		  
		
		String[][] childReturn_tRunJob_24 = childJob_tRunJob_24.runJob((String[]) paraList_tRunJob_24.toArray(new String[paraList_tRunJob_24.size()]));
		
            if(childJob_tRunJob_24.getErrorCode() == null){
                globalMap.put("tRunJob_24_CHILD_RETURN_CODE", childJob_tRunJob_24.getStatus() != null && ("failure").equals(childJob_tRunJob_24.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_24_CHILD_RETURN_CODE", childJob_tRunJob_24.getErrorCode());
            }
            if (childJob_tRunJob_24.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_24_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_24.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_24.getErrorCode();
                if (childJob_tRunJob_24.getErrorCode() != null || ("failure").equals(childJob_tRunJob_24.getStatus())) {
                    java.lang.Exception ce_tRunJob_24 = childJob_tRunJob_24.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_24!=null) ? (ce_tRunJob_24.getClass().getName() + ": " + ce_tRunJob_24.getMessage()) : ""));
                }

 


	tos_count_tRunJob_24++;

/**
 * [tRunJob_24 main ] stop
 */
	
	/**
	 * [tRunJob_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_24";

	

 



/**
 * [tRunJob_24 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_24";

	

 



/**
 * [tRunJob_24 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_24 end ] start
	 */

	

	
	
	currentComponent="tRunJob_24";

	

 

ok_Hash.put("tRunJob_24", true);
end_Hash.put("tRunJob_24", System.currentTimeMillis());




/**
 * [tRunJob_24 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_24:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk17", 0, "ok");
								} 
							
							tRunJob_25Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_24 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_24";

	

 



/**
 * [tRunJob_24 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_24_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_25Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_25_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_25", false);
		start_Hash.put("tRunJob_25", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_25";

	
		int tos_count_tRunJob_25 = 0;
		


 



/**
 * [tRunJob_25 begin ] stop
 */
	
	/**
	 * [tRunJob_25 main ] start
	 */

	

	
	
	currentComponent="tRunJob_25";

	
	java.util.List<String> paraList_tRunJob_25 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_25.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_25.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_25.add("--father_node=tRunJob_25");
	      			
	        			paraList_tRunJob_25.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_25.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_25.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_25.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_25 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_25 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_25".equals(tRunJobName_tRunJob_25) && childResumePath_tRunJob_25 != null){
		paraList_tRunJob_25.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_25.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_25");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_25 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_25 = null;

	
	
		bigdata_project.fact_hosco_0_1.Fact_Hosco childJob_tRunJob_25 = new bigdata_project.fact_hosco_0_1.Fact_Hosco();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_25 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_25) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_25 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_25 : talendDataSources_tRunJob_25
			        .entrySet()) {
	            dataSources_tRunJob_25.put(talendDataSourceEntry_tRunJob_25.getKey(),
	                    talendDataSourceEntry_tRunJob_25.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_25.setDataSources(dataSources_tRunJob_25);
	    }
		  
			childJob_tRunJob_25.parentContextMap = parentContextMap_tRunJob_25;
		  
		
		String[][] childReturn_tRunJob_25 = childJob_tRunJob_25.runJob((String[]) paraList_tRunJob_25.toArray(new String[paraList_tRunJob_25.size()]));
		
            if(childJob_tRunJob_25.getErrorCode() == null){
                globalMap.put("tRunJob_25_CHILD_RETURN_CODE", childJob_tRunJob_25.getStatus() != null && ("failure").equals(childJob_tRunJob_25.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_25_CHILD_RETURN_CODE", childJob_tRunJob_25.getErrorCode());
            }
            if (childJob_tRunJob_25.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_25_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_25.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_25.getErrorCode();
                if (childJob_tRunJob_25.getErrorCode() != null || ("failure").equals(childJob_tRunJob_25.getStatus())) {
                    java.lang.Exception ce_tRunJob_25 = childJob_tRunJob_25.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_25!=null) ? (ce_tRunJob_25.getClass().getName() + ": " + ce_tRunJob_25.getMessage()) : ""));
                }

 


	tos_count_tRunJob_25++;

/**
 * [tRunJob_25 main ] stop
 */
	
	/**
	 * [tRunJob_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_25";

	

 



/**
 * [tRunJob_25 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_25";

	

 



/**
 * [tRunJob_25 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_25 end ] start
	 */

	

	
	
	currentComponent="tRunJob_25";

	

 

ok_Hash.put("tRunJob_25", true);
end_Hash.put("tRunJob_25", System.currentTimeMillis());




/**
 * [tRunJob_25 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_25 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_25";

	

 



/**
 * [tRunJob_25 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_25_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Full_ExecutionII Full_ExecutionIIClass = new Full_ExecutionII();

        int exitCode = Full_ExecutionIIClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Full_ExecutionII.class.getClassLoader().getResourceAsStream("bigdata_project/full_executionii_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Full_ExecutionII.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tRunJob_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRunJob_2) {
globalMap.put("tRunJob_2_SUBPROCESS_STATE", -1);

e_tRunJob_2.printStackTrace();

}
try {
errorCode = null;tRunJob_3Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRunJob_3) {
globalMap.put("tRunJob_3_SUBPROCESS_STATE", -1);

e_tRunJob_3.printStackTrace();

}
try {
errorCode = null;tRunJob_4Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRunJob_4) {
globalMap.put("tRunJob_4_SUBPROCESS_STATE", -1);

e_tRunJob_4.printStackTrace();

}
try {
errorCode = null;tRunJob_5Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRunJob_5) {
globalMap.put("tRunJob_5_SUBPROCESS_STATE", -1);

e_tRunJob_5.printStackTrace();

}
try {
errorCode = null;tRunJob_6Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRunJob_6) {
globalMap.put("tRunJob_6_SUBPROCESS_STATE", -1);

e_tRunJob_6.printStackTrace();

}
try {
errorCode = null;tRunJob_7Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRunJob_7) {
globalMap.put("tRunJob_7_SUBPROCESS_STATE", -1);

e_tRunJob_7.printStackTrace();

}
try {
errorCode = null;tRunJob_8Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRunJob_8) {
globalMap.put("tRunJob_8_SUBPROCESS_STATE", -1);

e_tRunJob_8.printStackTrace();

}
try {
errorCode = null;tRunJob_9Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRunJob_9) {
globalMap.put("tRunJob_9_SUBPROCESS_STATE", -1);

e_tRunJob_9.printStackTrace();

}
try {
errorCode = null;tRunJob_10Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRunJob_10) {
globalMap.put("tRunJob_10_SUBPROCESS_STATE", -1);

e_tRunJob_10.printStackTrace();

}
try {
errorCode = null;tRunJob_11Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRunJob_11) {
globalMap.put("tRunJob_11_SUBPROCESS_STATE", -1);

e_tRunJob_11.printStackTrace();

}
try {
errorCode = null;tRunJob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRunJob_1) {
globalMap.put("tRunJob_1_SUBPROCESS_STATE", -1);

e_tRunJob_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Full_ExecutionII");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     227332 characters generated by Talend Open Studio for Big Data 
 *     on the 18 mai 2022 22:37:55 CEST
 ************************************************************************************************/