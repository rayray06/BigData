// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package bigdata_project.view_sati_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: View_Sati Purpose: <br>
 * Description: <br>
 * 
 * @author ray-hann06@hotmail.fr
 * @version 7.3.1.20200219_1130
 * @status
 */
public class View_Sati implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (ConsEtabView != null) {

				this.setProperty("ConsEtabView", ConsEtabView.toString());

			}

			if (ConsuDiagView != null) {

				this.setProperty("ConsuDiagView", ConsuDiagView.toString());

			}

			if (ConsuProView != null) {

				this.setProperty("ConsuProView", ConsuProView.toString());

			}

			if (ConsuTable != null) {

				this.setProperty("ConsuTable", ConsuTable.toString());

			}

			if (DeathTable != null) {

				this.setProperty("DeathTable", DeathTable.toString());

			}

			if (DeathView != null) {

				this.setProperty("DeathView", DeathView.toString());

			}

			if (DiagTable != null) {

				this.setProperty("DiagTable", DiagTable.toString());

			}

			if (EtabTable != null) {

				this.setProperty("EtabTable", EtabTable.toString());

			}

			if (HoscoTable != null) {

				this.setProperty("HoscoTable", HoscoTable.toString());

			}

			if (HoscoView != null) {

				this.setProperty("HoscoView", HoscoView.toString());

			}

			if (HospiDiagView != null) {

				this.setProperty("HospiDiagView", HospiDiagView.toString());

			}

			if (HospiTable != null) {

				this.setProperty("HospiTable", HospiTable.toString());

			}

			if (HosView != null) {

				this.setProperty("HosView", HosView.toString());

			}

			if (PatientTable != null) {

				this.setProperty("PatientTable", PatientTable.toString());

			}

			if (ProfTable != null) {

				this.setProperty("ProfTable", ProfTable.toString());

			}

			if (RDVTable != null) {

				this.setProperty("RDVTable", RDVTable.toString());

			}

			if (SatiTable != null) {

				this.setProperty("SatiTable", SatiTable.toString());

			}

			if (SatiView != null) {

				this.setProperty("SatiView", SatiView.toString());

			}

			if (VisiteTable != null) {

				this.setProperty("VisiteTable", VisiteTable.toString());

			}

			if (ProjectHadoopCluster_JobHistory != null) {

				this.setProperty("ProjectHadoopCluster_JobHistory", ProjectHadoopCluster_JobHistory.toString());

			}

			if (ProjectHadoopCluster_NameNodeUri != null) {

				this.setProperty("ProjectHadoopCluster_NameNodeUri", ProjectHadoopCluster_NameNodeUri.toString());

			}

			if (ProjectHadoopCluster_ResourceManager != null) {

				this.setProperty("ProjectHadoopCluster_ResourceManager",
						ProjectHadoopCluster_ResourceManager.toString());

			}

			if (ProjectHadoopCluster_ResourceManagerScheduler != null) {

				this.setProperty("ProjectHadoopCluster_ResourceManagerScheduler",
						ProjectHadoopCluster_ResourceManagerScheduler.toString());

			}

			if (ProjectHadoopCluster_User != null) {

				this.setProperty("ProjectHadoopCluster_User", ProjectHadoopCluster_User.toString());

			}

		}

		public String ConsEtabView;

		public String getConsEtabView() {
			return this.ConsEtabView;
		}

		public String ConsuDiagView;

		public String getConsuDiagView() {
			return this.ConsuDiagView;
		}

		public String ConsuProView;

		public String getConsuProView() {
			return this.ConsuProView;
		}

		public String ConsuTable;

		public String getConsuTable() {
			return this.ConsuTable;
		}

		public String DeathTable;

		public String getDeathTable() {
			return this.DeathTable;
		}

		public String DeathView;

		public String getDeathView() {
			return this.DeathView;
		}

		public String DiagTable;

		public String getDiagTable() {
			return this.DiagTable;
		}

		public String EtabTable;

		public String getEtabTable() {
			return this.EtabTable;
		}

		public String HoscoTable;

		public String getHoscoTable() {
			return this.HoscoTable;
		}

		public String HoscoView;

		public String getHoscoView() {
			return this.HoscoView;
		}

		public String HospiDiagView;

		public String getHospiDiagView() {
			return this.HospiDiagView;
		}

		public String HospiTable;

		public String getHospiTable() {
			return this.HospiTable;
		}

		public String HosView;

		public String getHosView() {
			return this.HosView;
		}

		public String PatientTable;

		public String getPatientTable() {
			return this.PatientTable;
		}

		public String ProfTable;

		public String getProfTable() {
			return this.ProfTable;
		}

		public String RDVTable;

		public String getRDVTable() {
			return this.RDVTable;
		}

		public String SatiTable;

		public String getSatiTable() {
			return this.SatiTable;
		}

		public String SatiView;

		public String getSatiView() {
			return this.SatiView;
		}

		public String VisiteTable;

		public String getVisiteTable() {
			return this.VisiteTable;
		}

		public String ProjectHadoopCluster_JobHistory;

		public String getProjectHadoopCluster_JobHistory() {
			return this.ProjectHadoopCluster_JobHistory;
		}

		public String ProjectHadoopCluster_NameNodeUri;

		public String getProjectHadoopCluster_NameNodeUri() {
			return this.ProjectHadoopCluster_NameNodeUri;
		}

		public String ProjectHadoopCluster_ResourceManager;

		public String getProjectHadoopCluster_ResourceManager() {
			return this.ProjectHadoopCluster_ResourceManager;
		}

		public String ProjectHadoopCluster_ResourceManagerScheduler;

		public String getProjectHadoopCluster_ResourceManagerScheduler() {
			return this.ProjectHadoopCluster_ResourceManagerScheduler;
		}

		public String ProjectHadoopCluster_User;

		public String getProjectHadoopCluster_User() {
			return this.ProjectHadoopCluster_User;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "View_Sati";
	private final String projectName = "BIGDATA_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					View_Sati.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(View_Sati.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tHiveConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHiveConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHiveRow_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHiveRow_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHiveRow_16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHiveRow_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHiveRow_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHiveRow_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHiveRow_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHiveRow_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHiveRow_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHiveRow_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHiveRow_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHiveRow_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHiveRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHiveRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHiveRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHiveRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHiveRow_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHiveRow_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHiveRow_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHiveRow_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHiveRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHiveRow_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHiveRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHiveRow_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHiveRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHiveRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHiveRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHiveRow_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHiveRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHiveRow_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHiveRow_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHiveRow_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHiveConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHiveRow_15_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHiveRow_16_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHiveRow_13_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHiveRow_14_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHiveRow_11_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHiveRow_12_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHiveRow_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHiveRow_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHiveRow_9_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHiveRow_10_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHiveRow_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHiveRow_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHiveRow_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHiveRow_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHiveRow_7_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHiveRow_8_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHiveConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHiveConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tHiveConnection_1 begin ] start
				 */

				ok_Hash.put("tHiveConnection_1", false);
				start_Hash.put("tHiveConnection_1", System.currentTimeMillis());

				currentComponent = "tHiveConnection_1";

				int tos_count_tHiveConnection_1 = 0;

				globalMap.put("HADOOP_USER_NAME_tHiveConnection_1", System.getProperty("HADOOP_USER_NAME"));

				String url_tHiveConnection_1 = "jdbc:hive2://" + "group3.bigdata" + ":" + "10000" + "/" + "default";
				String additionalJdbcSettings_tHiveConnection_1 = "";
				if (!"".equals(additionalJdbcSettings_tHiveConnection_1.trim())) {
					if (!additionalJdbcSettings_tHiveConnection_1.startsWith(";")) {
						additionalJdbcSettings_tHiveConnection_1 = ";" + additionalJdbcSettings_tHiveConnection_1;
					}
					url_tHiveConnection_1 += additionalJdbcSettings_tHiveConnection_1;
				}
				String dbUser_tHiveConnection_1 = "cloudera";

				final String decryptedPassword_tHiveConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:qkozCJVjFe31Fxr9PwGtF1SrMEB4g1rsywF5eUZ1htoU+dVf");
				String dbPwd_tHiveConnection_1 = decryptedPassword_tHiveConnection_1;

				java.sql.Connection conn_tHiveConnection_1 = null;

				String driverClass_tHiveConnection_1 = "org.apache.hive.jdbc.HiveDriver";
				java.lang.Class jdbcclazz_tHiveConnection_1 = java.lang.Class.forName(driverClass_tHiveConnection_1);
				globalMap.put("driverClass_tHiveConnection_1", driverClass_tHiveConnection_1);

				conn_tHiveConnection_1 = java.sql.DriverManager.getConnection(url_tHiveConnection_1,
						dbUser_tHiveConnection_1, dbPwd_tHiveConnection_1);

				globalMap.put("conn_tHiveConnection_1", conn_tHiveConnection_1);
				if (null != conn_tHiveConnection_1) {

				}

				globalMap.put("current_client_path_separator", System.getProperty("path.separator"));
				System.setProperty("path.separator", ":");

				java.sql.Statement init_tHiveConnection_1 = conn_tHiveConnection_1.createStatement();
				init_tHiveConnection_1.execute("SET dfs.client.use.datanode.hostname=true");
				init_tHiveConnection_1.execute("SET " + "hive.exec.dynamic.partition" + "=" + "true");
				init_tHiveConnection_1.execute("SET " + "hive.exec.dynamic.partition.mode" + "=" + "nonstrict");
				init_tHiveConnection_1.execute("SET " + "hive.enforce.bucketing" + "=" + "true");
				init_tHiveConnection_1.execute("SET " + "hive.conf.validation" + "=" + "false");

				init_tHiveConnection_1.close();

				globalMap.put("conn_tHiveConnection_1", conn_tHiveConnection_1);

				globalMap.put("db_tHiveConnection_1", "default");

				String currentClientPathSeparator_tHiveConnection_1 = (String) globalMap
						.get("current_client_path_separator");
				if (currentClientPathSeparator_tHiveConnection_1 != null) {
					System.setProperty("path.separator", currentClientPathSeparator_tHiveConnection_1);
					globalMap.put("current_client_path_separator", null);
				}

				String currentClientUsername_tHiveConnection_1 = (String) globalMap.get("current_client_user_name");
				if (currentClientUsername_tHiveConnection_1 != null) {
					System.setProperty("user.name", currentClientUsername_tHiveConnection_1);
					globalMap.put("current_client_user_name", null);
				}

				String originalHadoopUsername_tHiveConnection_1 = (String) globalMap
						.get("HADOOP_USER_NAME_tHiveConnection_1");
				if (originalHadoopUsername_tHiveConnection_1 != null) {
					System.setProperty("HADOOP_USER_NAME", originalHadoopUsername_tHiveConnection_1);
					globalMap.put("HADOOP_USER_NAME_tHiveConnection_1", null);
				} else {
					System.clearProperty("HADOOP_USER_NAME");
				}

				/**
				 * [tHiveConnection_1 begin ] stop
				 */

				/**
				 * [tHiveConnection_1 main ] start
				 */

				currentComponent = "tHiveConnection_1";

				tos_count_tHiveConnection_1++;

				/**
				 * [tHiveConnection_1 main ] stop
				 */

				/**
				 * [tHiveConnection_1 process_data_begin ] start
				 */

				currentComponent = "tHiveConnection_1";

				/**
				 * [tHiveConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tHiveConnection_1 process_data_end ] start
				 */

				currentComponent = "tHiveConnection_1";

				/**
				 * [tHiveConnection_1 process_data_end ] stop
				 */

				/**
				 * [tHiveConnection_1 end ] start
				 */

				currentComponent = "tHiveConnection_1";

				ok_Hash.put("tHiveConnection_1", true);
				end_Hash.put("tHiveConnection_1", System.currentTimeMillis());

				/**
				 * [tHiveConnection_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHiveConnection_1:OnSubjobOk1", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk19", 0, "ok");
			}

			tHiveRow_15Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHiveConnection_1:OnSubjobOk2", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk17", 0, "ok");
			}

			tHiveRow_13Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHiveConnection_1:OnSubjobOk3", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk15", 0, "ok");
			}

			tHiveRow_11Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHiveConnection_1:OnSubjobOk4", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tHiveRow_1Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHiveConnection_1:OnSubjobOk5", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
			}

			tHiveRow_9Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHiveConnection_1:OnSubjobOk6", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
			}

			tHiveRow_5Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHiveConnection_1:OnSubjobOk7", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
			}

			tHiveRow_3Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHiveConnection_1:OnSubjobOk8", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
			}

			tHiveRow_7Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHiveConnection_1 finally ] start
				 */

				currentComponent = "tHiveConnection_1";

				/**
				 * [tHiveConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHiveConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tHiveRow_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHiveRow_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tHiveRow_15 begin ] start
				 */

				ok_Hash.put("tHiveRow_15", false);
				start_Hash.put("tHiveRow_15", System.currentTimeMillis());

				currentComponent = "tHiveRow_15";

				int tos_count_tHiveRow_15 = 0;

				java.sql.Connection conn_tHiveRow_15 = null;
				globalMap.put("current_client_path_separator", System.getProperty("path.separator"));
				System.setProperty("path.separator", ":");
				conn_tHiveRow_15 = (java.sql.Connection) globalMap.get("conn_tHiveConnection_1");

				String dbname_tHiveRow_15 = (String) globalMap.get("db_tHiveConnection_1");
				if (dbname_tHiveRow_15 != null && !"".equals(dbname_tHiveRow_15.trim())
						&& !"default".equals(dbname_tHiveRow_15.trim())) {
					java.sql.Statement goToDatabase_tHiveRow_15 = conn_tHiveRow_15.createStatement();
					goToDatabase_tHiveRow_15.execute("use " + dbname_tHiveRow_15);
					goToDatabase_tHiveRow_15.close();
				}

				String dbUser_tHiveRow_15 = (String) globalMap.get("dbUser_tHiveConnection_1");

				globalMap.put("HADOOP_USER_NAME_tHiveRow_15", System.getProperty("HADOOP_USER_NAME"));
				if (dbUser_tHiveRow_15 != null && !"".equals(dbUser_tHiveRow_15.trim())) {
					System.setProperty("HADOOP_USER_NAME", dbUser_tHiveRow_15);
					// make relative file path work for hive
					globalMap.put("current_client_user_name", System.getProperty("user.name"));
					System.setProperty("user.name", dbUser_tHiveRow_15);
				}

				java.sql.Statement stmt_tHiveRow_15 = conn_tHiveRow_15.createStatement();

				String query_tHiveRow_15 = "";
				boolean whetherReject_tHiveRow_15 = false;

				/**
				 * [tHiveRow_15 begin ] stop
				 */

				/**
				 * [tHiveRow_15 main ] start
				 */

				currentComponent = "tHiveRow_15";

				query_tHiveRow_15 = "DROP VIEW IF EXISTS " + context.DeathView;
				whetherReject_tHiveRow_15 = false;

				globalMap.put("tHiveRow_15_QUERY", query_tHiveRow_15);

				try {

					java.text.DateFormat dateStrFormat_tHiveRow_15 = new java.text.SimpleDateFormat("yyyyMMddHHmmss");
					final String queryIdentifier_tHiveRow_15 = projectName + "_" + jobName + "_"
							+ jobVersion.replace(".", "_") + "_tHiveRow_15_"
							+ dateStrFormat_tHiveRow_15.format(new Date(startTime));
// For MapReduce Mode
					stmt_tHiveRow_15.execute("set mapred.job.name=" + queryIdentifier_tHiveRow_15);

					stmt_tHiveRow_15.execute(query_tHiveRow_15);

				} catch (java.lang.Exception e) {
					whetherReject_tHiveRow_15 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tHiveRow_15) {

				}

				tos_count_tHiveRow_15++;

				/**
				 * [tHiveRow_15 main ] stop
				 */

				/**
				 * [tHiveRow_15 process_data_begin ] start
				 */

				currentComponent = "tHiveRow_15";

				/**
				 * [tHiveRow_15 process_data_begin ] stop
				 */

				/**
				 * [tHiveRow_15 process_data_end ] start
				 */

				currentComponent = "tHiveRow_15";

				/**
				 * [tHiveRow_15 process_data_end ] stop
				 */

				/**
				 * [tHiveRow_15 end ] start
				 */

				currentComponent = "tHiveRow_15";

				stmt_tHiveRow_15.close();

				String currentClientPathSeparator_tHiveRow_15 = (String) globalMap.get("current_client_path_separator");
				if (currentClientPathSeparator_tHiveRow_15 != null) {
					System.setProperty("path.separator", currentClientPathSeparator_tHiveRow_15);
					globalMap.put("current_client_path_separator", null);
				}

				String currentClientUsername_tHiveRow_15 = (String) globalMap.get("current_client_user_name");
				if (currentClientUsername_tHiveRow_15 != null) {
					System.setProperty("user.name", currentClientUsername_tHiveRow_15);
					globalMap.put("current_client_user_name", null);
				}

				String originalHadoopUsername_tHiveRow_15 = (String) globalMap.get("HADOOP_USER_NAME_tHiveRow_15");
				if (originalHadoopUsername_tHiveRow_15 != null) {
					System.setProperty("HADOOP_USER_NAME", originalHadoopUsername_tHiveRow_15);
					globalMap.put("HADOOP_USER_NAME_tHiveRow_15", null);
				} else {
					System.clearProperty("HADOOP_USER_NAME");
				}

				ok_Hash.put("tHiveRow_15", true);
				end_Hash.put("tHiveRow_15", System.currentTimeMillis());

				/**
				 * [tHiveRow_15 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHiveRow_15:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk18", 0, "ok");
			}

			tHiveRow_16Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHiveRow_15 finally ] start
				 */

				currentComponent = "tHiveRow_15";

				/**
				 * [tHiveRow_15 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHiveRow_15_SUBPROCESS_STATE", 1);
	}

	public void tHiveRow_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHiveRow_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tHiveRow_16 begin ] start
				 */

				ok_Hash.put("tHiveRow_16", false);
				start_Hash.put("tHiveRow_16", System.currentTimeMillis());

				currentComponent = "tHiveRow_16";

				int tos_count_tHiveRow_16 = 0;

				java.sql.Connection conn_tHiveRow_16 = null;
				globalMap.put("current_client_path_separator", System.getProperty("path.separator"));
				System.setProperty("path.separator", ":");
				conn_tHiveRow_16 = (java.sql.Connection) globalMap.get("conn_tHiveConnection_1");

				String dbname_tHiveRow_16 = (String) globalMap.get("db_tHiveConnection_1");
				if (dbname_tHiveRow_16 != null && !"".equals(dbname_tHiveRow_16.trim())
						&& !"default".equals(dbname_tHiveRow_16.trim())) {
					java.sql.Statement goToDatabase_tHiveRow_16 = conn_tHiveRow_16.createStatement();
					goToDatabase_tHiveRow_16.execute("use " + dbname_tHiveRow_16);
					goToDatabase_tHiveRow_16.close();
				}

				String dbUser_tHiveRow_16 = (String) globalMap.get("dbUser_tHiveConnection_1");

				globalMap.put("HADOOP_USER_NAME_tHiveRow_16", System.getProperty("HADOOP_USER_NAME"));
				if (dbUser_tHiveRow_16 != null && !"".equals(dbUser_tHiveRow_16.trim())) {
					System.setProperty("HADOOP_USER_NAME", dbUser_tHiveRow_16);
					// make relative file path work for hive
					globalMap.put("current_client_user_name", System.getProperty("user.name"));
					System.setProperty("user.name", dbUser_tHiveRow_16);
				}

				java.sql.Statement stmt_tHiveRow_16 = conn_tHiveRow_16.createStatement();

				String query_tHiveRow_16 = "";
				boolean whetherReject_tHiveRow_16 = false;

				/**
				 * [tHiveRow_16 begin ] stop
				 */

				/**
				 * [tHiveRow_16 main ] start
				 */

				currentComponent = "tHiveRow_16";

				query_tHiveRow_16 = "CREATE VIEW " + context.DeathView + " AS SELECT * FROM " + context.DeathTable;
				whetherReject_tHiveRow_16 = false;

				globalMap.put("tHiveRow_16_QUERY", query_tHiveRow_16);

				try {

					java.text.DateFormat dateStrFormat_tHiveRow_16 = new java.text.SimpleDateFormat("yyyyMMddHHmmss");
					final String queryIdentifier_tHiveRow_16 = projectName + "_" + jobName + "_"
							+ jobVersion.replace(".", "_") + "_tHiveRow_16_"
							+ dateStrFormat_tHiveRow_16.format(new Date(startTime));
// For MapReduce Mode
					stmt_tHiveRow_16.execute("set mapred.job.name=" + queryIdentifier_tHiveRow_16);

					stmt_tHiveRow_16.execute(query_tHiveRow_16);

				} catch (java.lang.Exception e) {
					whetherReject_tHiveRow_16 = true;

					System.err.print(e.getMessage());

				}

				tos_count_tHiveRow_16++;

				/**
				 * [tHiveRow_16 main ] stop
				 */

				/**
				 * [tHiveRow_16 process_data_begin ] start
				 */

				currentComponent = "tHiveRow_16";

				/**
				 * [tHiveRow_16 process_data_begin ] stop
				 */

				/**
				 * [tHiveRow_16 process_data_end ] start
				 */

				currentComponent = "tHiveRow_16";

				/**
				 * [tHiveRow_16 process_data_end ] stop
				 */

				/**
				 * [tHiveRow_16 end ] start
				 */

				currentComponent = "tHiveRow_16";

				stmt_tHiveRow_16.close();

				String currentClientPathSeparator_tHiveRow_16 = (String) globalMap.get("current_client_path_separator");
				if (currentClientPathSeparator_tHiveRow_16 != null) {
					System.setProperty("path.separator", currentClientPathSeparator_tHiveRow_16);
					globalMap.put("current_client_path_separator", null);
				}

				String currentClientUsername_tHiveRow_16 = (String) globalMap.get("current_client_user_name");
				if (currentClientUsername_tHiveRow_16 != null) {
					System.setProperty("user.name", currentClientUsername_tHiveRow_16);
					globalMap.put("current_client_user_name", null);
				}

				String originalHadoopUsername_tHiveRow_16 = (String) globalMap.get("HADOOP_USER_NAME_tHiveRow_16");
				if (originalHadoopUsername_tHiveRow_16 != null) {
					System.setProperty("HADOOP_USER_NAME", originalHadoopUsername_tHiveRow_16);
					globalMap.put("HADOOP_USER_NAME_tHiveRow_16", null);
				} else {
					System.clearProperty("HADOOP_USER_NAME");
				}

				ok_Hash.put("tHiveRow_16", true);
				end_Hash.put("tHiveRow_16", System.currentTimeMillis());

				/**
				 * [tHiveRow_16 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHiveRow_16 finally ] start
				 */

				currentComponent = "tHiveRow_16";

				/**
				 * [tHiveRow_16 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHiveRow_16_SUBPROCESS_STATE", 1);
	}

	public void tHiveRow_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHiveRow_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tHiveRow_13 begin ] start
				 */

				ok_Hash.put("tHiveRow_13", false);
				start_Hash.put("tHiveRow_13", System.currentTimeMillis());

				currentComponent = "tHiveRow_13";

				int tos_count_tHiveRow_13 = 0;

				java.sql.Connection conn_tHiveRow_13 = null;
				globalMap.put("current_client_path_separator", System.getProperty("path.separator"));
				System.setProperty("path.separator", ":");
				conn_tHiveRow_13 = (java.sql.Connection) globalMap.get("conn_tHiveConnection_1");

				String dbname_tHiveRow_13 = (String) globalMap.get("db_tHiveConnection_1");
				if (dbname_tHiveRow_13 != null && !"".equals(dbname_tHiveRow_13.trim())
						&& !"default".equals(dbname_tHiveRow_13.trim())) {
					java.sql.Statement goToDatabase_tHiveRow_13 = conn_tHiveRow_13.createStatement();
					goToDatabase_tHiveRow_13.execute("use " + dbname_tHiveRow_13);
					goToDatabase_tHiveRow_13.close();
				}

				String dbUser_tHiveRow_13 = (String) globalMap.get("dbUser_tHiveConnection_1");

				globalMap.put("HADOOP_USER_NAME_tHiveRow_13", System.getProperty("HADOOP_USER_NAME"));
				if (dbUser_tHiveRow_13 != null && !"".equals(dbUser_tHiveRow_13.trim())) {
					System.setProperty("HADOOP_USER_NAME", dbUser_tHiveRow_13);
					// make relative file path work for hive
					globalMap.put("current_client_user_name", System.getProperty("user.name"));
					System.setProperty("user.name", dbUser_tHiveRow_13);
				}

				java.sql.Statement stmt_tHiveRow_13 = conn_tHiveRow_13.createStatement();

				String query_tHiveRow_13 = "";
				boolean whetherReject_tHiveRow_13 = false;

				/**
				 * [tHiveRow_13 begin ] stop
				 */

				/**
				 * [tHiveRow_13 main ] start
				 */

				currentComponent = "tHiveRow_13";

				query_tHiveRow_13 = "DROP VIEW IF EXISTS " + context.ConsEtabView;
				whetherReject_tHiveRow_13 = false;

				globalMap.put("tHiveRow_13_QUERY", query_tHiveRow_13);

				try {

					java.text.DateFormat dateStrFormat_tHiveRow_13 = new java.text.SimpleDateFormat("yyyyMMddHHmmss");
					final String queryIdentifier_tHiveRow_13 = projectName + "_" + jobName + "_"
							+ jobVersion.replace(".", "_") + "_tHiveRow_13_"
							+ dateStrFormat_tHiveRow_13.format(new Date(startTime));
// For MapReduce Mode
					stmt_tHiveRow_13.execute("set mapred.job.name=" + queryIdentifier_tHiveRow_13);

					stmt_tHiveRow_13.execute(query_tHiveRow_13);

				} catch (java.lang.Exception e) {
					whetherReject_tHiveRow_13 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tHiveRow_13) {

				}

				tos_count_tHiveRow_13++;

				/**
				 * [tHiveRow_13 main ] stop
				 */

				/**
				 * [tHiveRow_13 process_data_begin ] start
				 */

				currentComponent = "tHiveRow_13";

				/**
				 * [tHiveRow_13 process_data_begin ] stop
				 */

				/**
				 * [tHiveRow_13 process_data_end ] start
				 */

				currentComponent = "tHiveRow_13";

				/**
				 * [tHiveRow_13 process_data_end ] stop
				 */

				/**
				 * [tHiveRow_13 end ] start
				 */

				currentComponent = "tHiveRow_13";

				stmt_tHiveRow_13.close();

				String currentClientPathSeparator_tHiveRow_13 = (String) globalMap.get("current_client_path_separator");
				if (currentClientPathSeparator_tHiveRow_13 != null) {
					System.setProperty("path.separator", currentClientPathSeparator_tHiveRow_13);
					globalMap.put("current_client_path_separator", null);
				}

				String currentClientUsername_tHiveRow_13 = (String) globalMap.get("current_client_user_name");
				if (currentClientUsername_tHiveRow_13 != null) {
					System.setProperty("user.name", currentClientUsername_tHiveRow_13);
					globalMap.put("current_client_user_name", null);
				}

				String originalHadoopUsername_tHiveRow_13 = (String) globalMap.get("HADOOP_USER_NAME_tHiveRow_13");
				if (originalHadoopUsername_tHiveRow_13 != null) {
					System.setProperty("HADOOP_USER_NAME", originalHadoopUsername_tHiveRow_13);
					globalMap.put("HADOOP_USER_NAME_tHiveRow_13", null);
				} else {
					System.clearProperty("HADOOP_USER_NAME");
				}

				ok_Hash.put("tHiveRow_13", true);
				end_Hash.put("tHiveRow_13", System.currentTimeMillis());

				/**
				 * [tHiveRow_13 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHiveRow_13:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk16", 0, "ok");
			}

			tHiveRow_14Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHiveRow_13 finally ] start
				 */

				currentComponent = "tHiveRow_13";

				/**
				 * [tHiveRow_13 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHiveRow_13_SUBPROCESS_STATE", 1);
	}

	public void tHiveRow_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHiveRow_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tHiveRow_14 begin ] start
				 */

				ok_Hash.put("tHiveRow_14", false);
				start_Hash.put("tHiveRow_14", System.currentTimeMillis());

				currentComponent = "tHiveRow_14";

				int tos_count_tHiveRow_14 = 0;

				java.sql.Connection conn_tHiveRow_14 = null;
				globalMap.put("current_client_path_separator", System.getProperty("path.separator"));
				System.setProperty("path.separator", ":");
				conn_tHiveRow_14 = (java.sql.Connection) globalMap.get("conn_tHiveConnection_1");

				String dbname_tHiveRow_14 = (String) globalMap.get("db_tHiveConnection_1");
				if (dbname_tHiveRow_14 != null && !"".equals(dbname_tHiveRow_14.trim())
						&& !"default".equals(dbname_tHiveRow_14.trim())) {
					java.sql.Statement goToDatabase_tHiveRow_14 = conn_tHiveRow_14.createStatement();
					goToDatabase_tHiveRow_14.execute("use " + dbname_tHiveRow_14);
					goToDatabase_tHiveRow_14.close();
				}

				String dbUser_tHiveRow_14 = (String) globalMap.get("dbUser_tHiveConnection_1");

				globalMap.put("HADOOP_USER_NAME_tHiveRow_14", System.getProperty("HADOOP_USER_NAME"));
				if (dbUser_tHiveRow_14 != null && !"".equals(dbUser_tHiveRow_14.trim())) {
					System.setProperty("HADOOP_USER_NAME", dbUser_tHiveRow_14);
					// make relative file path work for hive
					globalMap.put("current_client_user_name", System.getProperty("user.name"));
					System.setProperty("user.name", dbUser_tHiveRow_14);
				}

				java.sql.Statement stmt_tHiveRow_14 = conn_tHiveRow_14.createStatement();

				String query_tHiveRow_14 = "";
				boolean whetherReject_tHiveRow_14 = false;

				/**
				 * [tHiveRow_14 begin ] stop
				 */

				/**
				 * [tHiveRow_14 main ] start
				 */

				currentComponent = "tHiveRow_14";

				query_tHiveRow_14 = "CREATE VIEW " + context.ConsEtabView
						+ " AS SELECT TF.Num_Consultation,Temps_Debut,Temps_Fin,cedex FROM ( SELECT T1.Num_Consultation,Temps_Debut,Temps_Fin,Iden"
						+ "tifiant_Organisation FROM " + context.RDVTable + " T1 JOIN " + context.ConsuTable
						+ " T2 ON ( T1.Num_Consultation = T2.Num_Consultation ) ) TF JOIN " + context.EtabTable
						+ " T3 ON (TF.Identifiant_organisation = T3.identifiant_organisation)";
				whetherReject_tHiveRow_14 = false;

				globalMap.put("tHiveRow_14_QUERY", query_tHiveRow_14);

				try {

					java.text.DateFormat dateStrFormat_tHiveRow_14 = new java.text.SimpleDateFormat("yyyyMMddHHmmss");
					final String queryIdentifier_tHiveRow_14 = projectName + "_" + jobName + "_"
							+ jobVersion.replace(".", "_") + "_tHiveRow_14_"
							+ dateStrFormat_tHiveRow_14.format(new Date(startTime));
// For MapReduce Mode
					stmt_tHiveRow_14.execute("set mapred.job.name=" + queryIdentifier_tHiveRow_14);

					stmt_tHiveRow_14.execute(query_tHiveRow_14);

				} catch (java.lang.Exception e) {
					whetherReject_tHiveRow_14 = true;

					System.err.print(e.getMessage());

				}

				tos_count_tHiveRow_14++;

				/**
				 * [tHiveRow_14 main ] stop
				 */

				/**
				 * [tHiveRow_14 process_data_begin ] start
				 */

				currentComponent = "tHiveRow_14";

				/**
				 * [tHiveRow_14 process_data_begin ] stop
				 */

				/**
				 * [tHiveRow_14 process_data_end ] start
				 */

				currentComponent = "tHiveRow_14";

				/**
				 * [tHiveRow_14 process_data_end ] stop
				 */

				/**
				 * [tHiveRow_14 end ] start
				 */

				currentComponent = "tHiveRow_14";

				stmt_tHiveRow_14.close();

				String currentClientPathSeparator_tHiveRow_14 = (String) globalMap.get("current_client_path_separator");
				if (currentClientPathSeparator_tHiveRow_14 != null) {
					System.setProperty("path.separator", currentClientPathSeparator_tHiveRow_14);
					globalMap.put("current_client_path_separator", null);
				}

				String currentClientUsername_tHiveRow_14 = (String) globalMap.get("current_client_user_name");
				if (currentClientUsername_tHiveRow_14 != null) {
					System.setProperty("user.name", currentClientUsername_tHiveRow_14);
					globalMap.put("current_client_user_name", null);
				}

				String originalHadoopUsername_tHiveRow_14 = (String) globalMap.get("HADOOP_USER_NAME_tHiveRow_14");
				if (originalHadoopUsername_tHiveRow_14 != null) {
					System.setProperty("HADOOP_USER_NAME", originalHadoopUsername_tHiveRow_14);
					globalMap.put("HADOOP_USER_NAME_tHiveRow_14", null);
				} else {
					System.clearProperty("HADOOP_USER_NAME");
				}

				ok_Hash.put("tHiveRow_14", true);
				end_Hash.put("tHiveRow_14", System.currentTimeMillis());

				/**
				 * [tHiveRow_14 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHiveRow_14 finally ] start
				 */

				currentComponent = "tHiveRow_14";

				/**
				 * [tHiveRow_14 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHiveRow_14_SUBPROCESS_STATE", 1);
	}

	public void tHiveRow_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHiveRow_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tHiveRow_11 begin ] start
				 */

				ok_Hash.put("tHiveRow_11", false);
				start_Hash.put("tHiveRow_11", System.currentTimeMillis());

				currentComponent = "tHiveRow_11";

				int tos_count_tHiveRow_11 = 0;

				java.sql.Connection conn_tHiveRow_11 = null;
				globalMap.put("current_client_path_separator", System.getProperty("path.separator"));
				System.setProperty("path.separator", ":");
				conn_tHiveRow_11 = (java.sql.Connection) globalMap.get("conn_tHiveConnection_1");

				String dbname_tHiveRow_11 = (String) globalMap.get("db_tHiveConnection_1");
				if (dbname_tHiveRow_11 != null && !"".equals(dbname_tHiveRow_11.trim())
						&& !"default".equals(dbname_tHiveRow_11.trim())) {
					java.sql.Statement goToDatabase_tHiveRow_11 = conn_tHiveRow_11.createStatement();
					goToDatabase_tHiveRow_11.execute("use " + dbname_tHiveRow_11);
					goToDatabase_tHiveRow_11.close();
				}

				String dbUser_tHiveRow_11 = (String) globalMap.get("dbUser_tHiveConnection_1");

				globalMap.put("HADOOP_USER_NAME_tHiveRow_11", System.getProperty("HADOOP_USER_NAME"));
				if (dbUser_tHiveRow_11 != null && !"".equals(dbUser_tHiveRow_11.trim())) {
					System.setProperty("HADOOP_USER_NAME", dbUser_tHiveRow_11);
					// make relative file path work for hive
					globalMap.put("current_client_user_name", System.getProperty("user.name"));
					System.setProperty("user.name", dbUser_tHiveRow_11);
				}

				java.sql.Statement stmt_tHiveRow_11 = conn_tHiveRow_11.createStatement();

				String query_tHiveRow_11 = "";
				boolean whetherReject_tHiveRow_11 = false;

				/**
				 * [tHiveRow_11 begin ] stop
				 */

				/**
				 * [tHiveRow_11 main ] start
				 */

				currentComponent = "tHiveRow_11";

				query_tHiveRow_11 = "DROP VIEW IF EXISTS " + context.HosView;
				whetherReject_tHiveRow_11 = false;

				globalMap.put("tHiveRow_11_QUERY", query_tHiveRow_11);

				try {

					java.text.DateFormat dateStrFormat_tHiveRow_11 = new java.text.SimpleDateFormat("yyyyMMddHHmmss");
					final String queryIdentifier_tHiveRow_11 = projectName + "_" + jobName + "_"
							+ jobVersion.replace(".", "_") + "_tHiveRow_11_"
							+ dateStrFormat_tHiveRow_11.format(new Date(startTime));
// For MapReduce Mode
					stmt_tHiveRow_11.execute("set mapred.job.name=" + queryIdentifier_tHiveRow_11);

					stmt_tHiveRow_11.execute(query_tHiveRow_11);

				} catch (java.lang.Exception e) {
					whetherReject_tHiveRow_11 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tHiveRow_11) {

				}

				tos_count_tHiveRow_11++;

				/**
				 * [tHiveRow_11 main ] stop
				 */

				/**
				 * [tHiveRow_11 process_data_begin ] start
				 */

				currentComponent = "tHiveRow_11";

				/**
				 * [tHiveRow_11 process_data_begin ] stop
				 */

				/**
				 * [tHiveRow_11 process_data_end ] start
				 */

				currentComponent = "tHiveRow_11";

				/**
				 * [tHiveRow_11 process_data_end ] stop
				 */

				/**
				 * [tHiveRow_11 end ] start
				 */

				currentComponent = "tHiveRow_11";

				stmt_tHiveRow_11.close();

				String currentClientPathSeparator_tHiveRow_11 = (String) globalMap.get("current_client_path_separator");
				if (currentClientPathSeparator_tHiveRow_11 != null) {
					System.setProperty("path.separator", currentClientPathSeparator_tHiveRow_11);
					globalMap.put("current_client_path_separator", null);
				}

				String currentClientUsername_tHiveRow_11 = (String) globalMap.get("current_client_user_name");
				if (currentClientUsername_tHiveRow_11 != null) {
					System.setProperty("user.name", currentClientUsername_tHiveRow_11);
					globalMap.put("current_client_user_name", null);
				}

				String originalHadoopUsername_tHiveRow_11 = (String) globalMap.get("HADOOP_USER_NAME_tHiveRow_11");
				if (originalHadoopUsername_tHiveRow_11 != null) {
					System.setProperty("HADOOP_USER_NAME", originalHadoopUsername_tHiveRow_11);
					globalMap.put("HADOOP_USER_NAME_tHiveRow_11", null);
				} else {
					System.clearProperty("HADOOP_USER_NAME");
				}

				ok_Hash.put("tHiveRow_11", true);
				end_Hash.put("tHiveRow_11", System.currentTimeMillis());

				/**
				 * [tHiveRow_11 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHiveRow_11:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk14", 0, "ok");
			}

			tHiveRow_12Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHiveRow_11 finally ] start
				 */

				currentComponent = "tHiveRow_11";

				/**
				 * [tHiveRow_11 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHiveRow_11_SUBPROCESS_STATE", 1);
	}

	public void tHiveRow_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHiveRow_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tHiveRow_12 begin ] start
				 */

				ok_Hash.put("tHiveRow_12", false);
				start_Hash.put("tHiveRow_12", System.currentTimeMillis());

				currentComponent = "tHiveRow_12";

				int tos_count_tHiveRow_12 = 0;

				java.sql.Connection conn_tHiveRow_12 = null;
				globalMap.put("current_client_path_separator", System.getProperty("path.separator"));
				System.setProperty("path.separator", ":");
				conn_tHiveRow_12 = (java.sql.Connection) globalMap.get("conn_tHiveConnection_1");

				String dbname_tHiveRow_12 = (String) globalMap.get("db_tHiveConnection_1");
				if (dbname_tHiveRow_12 != null && !"".equals(dbname_tHiveRow_12.trim())
						&& !"default".equals(dbname_tHiveRow_12.trim())) {
					java.sql.Statement goToDatabase_tHiveRow_12 = conn_tHiveRow_12.createStatement();
					goToDatabase_tHiveRow_12.execute("use " + dbname_tHiveRow_12);
					goToDatabase_tHiveRow_12.close();
				}

				String dbUser_tHiveRow_12 = (String) globalMap.get("dbUser_tHiveConnection_1");

				globalMap.put("HADOOP_USER_NAME_tHiveRow_12", System.getProperty("HADOOP_USER_NAME"));
				if (dbUser_tHiveRow_12 != null && !"".equals(dbUser_tHiveRow_12.trim())) {
					System.setProperty("HADOOP_USER_NAME", dbUser_tHiveRow_12);
					// make relative file path work for hive
					globalMap.put("current_client_user_name", System.getProperty("user.name"));
					System.setProperty("user.name", dbUser_tHiveRow_12);
				}

				java.sql.Statement stmt_tHiveRow_12 = conn_tHiveRow_12.createStatement();

				String query_tHiveRow_12 = "";
				boolean whetherReject_tHiveRow_12 = false;

				/**
				 * [tHiveRow_12 begin ] stop
				 */

				/**
				 * [tHiveRow_12 main ] start
				 */

				currentComponent = "tHiveRow_12";

				query_tHiveRow_12 = "CREATE VIEW " + context.HosView + " AS SELECT * FROM " + context.VisiteTable;
				whetherReject_tHiveRow_12 = false;

				globalMap.put("tHiveRow_12_QUERY", query_tHiveRow_12);

				try {

					java.text.DateFormat dateStrFormat_tHiveRow_12 = new java.text.SimpleDateFormat("yyyyMMddHHmmss");
					final String queryIdentifier_tHiveRow_12 = projectName + "_" + jobName + "_"
							+ jobVersion.replace(".", "_") + "_tHiveRow_12_"
							+ dateStrFormat_tHiveRow_12.format(new Date(startTime));
// For MapReduce Mode
					stmt_tHiveRow_12.execute("set mapred.job.name=" + queryIdentifier_tHiveRow_12);

					stmt_tHiveRow_12.execute(query_tHiveRow_12);

				} catch (java.lang.Exception e) {
					whetherReject_tHiveRow_12 = true;

					System.err.print(e.getMessage());

				}

				tos_count_tHiveRow_12++;

				/**
				 * [tHiveRow_12 main ] stop
				 */

				/**
				 * [tHiveRow_12 process_data_begin ] start
				 */

				currentComponent = "tHiveRow_12";

				/**
				 * [tHiveRow_12 process_data_begin ] stop
				 */

				/**
				 * [tHiveRow_12 process_data_end ] start
				 */

				currentComponent = "tHiveRow_12";

				/**
				 * [tHiveRow_12 process_data_end ] stop
				 */

				/**
				 * [tHiveRow_12 end ] start
				 */

				currentComponent = "tHiveRow_12";

				stmt_tHiveRow_12.close();

				String currentClientPathSeparator_tHiveRow_12 = (String) globalMap.get("current_client_path_separator");
				if (currentClientPathSeparator_tHiveRow_12 != null) {
					System.setProperty("path.separator", currentClientPathSeparator_tHiveRow_12);
					globalMap.put("current_client_path_separator", null);
				}

				String currentClientUsername_tHiveRow_12 = (String) globalMap.get("current_client_user_name");
				if (currentClientUsername_tHiveRow_12 != null) {
					System.setProperty("user.name", currentClientUsername_tHiveRow_12);
					globalMap.put("current_client_user_name", null);
				}

				String originalHadoopUsername_tHiveRow_12 = (String) globalMap.get("HADOOP_USER_NAME_tHiveRow_12");
				if (originalHadoopUsername_tHiveRow_12 != null) {
					System.setProperty("HADOOP_USER_NAME", originalHadoopUsername_tHiveRow_12);
					globalMap.put("HADOOP_USER_NAME_tHiveRow_12", null);
				} else {
					System.clearProperty("HADOOP_USER_NAME");
				}

				ok_Hash.put("tHiveRow_12", true);
				end_Hash.put("tHiveRow_12", System.currentTimeMillis());

				/**
				 * [tHiveRow_12 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHiveRow_12 finally ] start
				 */

				currentComponent = "tHiveRow_12";

				/**
				 * [tHiveRow_12 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHiveRow_12_SUBPROCESS_STATE", 1);
	}

	public void tHiveRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHiveRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tHiveRow_1 begin ] start
				 */

				ok_Hash.put("tHiveRow_1", false);
				start_Hash.put("tHiveRow_1", System.currentTimeMillis());

				currentComponent = "tHiveRow_1";

				int tos_count_tHiveRow_1 = 0;

				java.sql.Connection conn_tHiveRow_1 = null;
				globalMap.put("current_client_path_separator", System.getProperty("path.separator"));
				System.setProperty("path.separator", ":");
				conn_tHiveRow_1 = (java.sql.Connection) globalMap.get("conn_tHiveConnection_1");

				String dbname_tHiveRow_1 = (String) globalMap.get("db_tHiveConnection_1");
				if (dbname_tHiveRow_1 != null && !"".equals(dbname_tHiveRow_1.trim())
						&& !"default".equals(dbname_tHiveRow_1.trim())) {
					java.sql.Statement goToDatabase_tHiveRow_1 = conn_tHiveRow_1.createStatement();
					goToDatabase_tHiveRow_1.execute("use " + dbname_tHiveRow_1);
					goToDatabase_tHiveRow_1.close();
				}

				String dbUser_tHiveRow_1 = (String) globalMap.get("dbUser_tHiveConnection_1");

				globalMap.put("HADOOP_USER_NAME_tHiveRow_1", System.getProperty("HADOOP_USER_NAME"));
				if (dbUser_tHiveRow_1 != null && !"".equals(dbUser_tHiveRow_1.trim())) {
					System.setProperty("HADOOP_USER_NAME", dbUser_tHiveRow_1);
					// make relative file path work for hive
					globalMap.put("current_client_user_name", System.getProperty("user.name"));
					System.setProperty("user.name", dbUser_tHiveRow_1);
				}

				java.sql.Statement stmt_tHiveRow_1 = conn_tHiveRow_1.createStatement();

				String query_tHiveRow_1 = "";
				boolean whetherReject_tHiveRow_1 = false;

				/**
				 * [tHiveRow_1 begin ] stop
				 */

				/**
				 * [tHiveRow_1 main ] start
				 */

				currentComponent = "tHiveRow_1";

				query_tHiveRow_1 = "DROP VIEW IF EXISTS " + context.SatiView;
				whetherReject_tHiveRow_1 = false;

				globalMap.put("tHiveRow_1_QUERY", query_tHiveRow_1);

				try {

					java.text.DateFormat dateStrFormat_tHiveRow_1 = new java.text.SimpleDateFormat("yyyyMMddHHmmss");
					final String queryIdentifier_tHiveRow_1 = projectName + "_" + jobName + "_"
							+ jobVersion.replace(".", "_") + "_tHiveRow_1_"
							+ dateStrFormat_tHiveRow_1.format(new Date(startTime));
// For MapReduce Mode
					stmt_tHiveRow_1.execute("set mapred.job.name=" + queryIdentifier_tHiveRow_1);

					stmt_tHiveRow_1.execute(query_tHiveRow_1);

				} catch (java.lang.Exception e) {
					whetherReject_tHiveRow_1 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tHiveRow_1) {

				}

				tos_count_tHiveRow_1++;

				/**
				 * [tHiveRow_1 main ] stop
				 */

				/**
				 * [tHiveRow_1 process_data_begin ] start
				 */

				currentComponent = "tHiveRow_1";

				/**
				 * [tHiveRow_1 process_data_begin ] stop
				 */

				/**
				 * [tHiveRow_1 process_data_end ] start
				 */

				currentComponent = "tHiveRow_1";

				/**
				 * [tHiveRow_1 process_data_end ] stop
				 */

				/**
				 * [tHiveRow_1 end ] start
				 */

				currentComponent = "tHiveRow_1";

				stmt_tHiveRow_1.close();

				String currentClientPathSeparator_tHiveRow_1 = (String) globalMap.get("current_client_path_separator");
				if (currentClientPathSeparator_tHiveRow_1 != null) {
					System.setProperty("path.separator", currentClientPathSeparator_tHiveRow_1);
					globalMap.put("current_client_path_separator", null);
				}

				String currentClientUsername_tHiveRow_1 = (String) globalMap.get("current_client_user_name");
				if (currentClientUsername_tHiveRow_1 != null) {
					System.setProperty("user.name", currentClientUsername_tHiveRow_1);
					globalMap.put("current_client_user_name", null);
				}

				String originalHadoopUsername_tHiveRow_1 = (String) globalMap.get("HADOOP_USER_NAME_tHiveRow_1");
				if (originalHadoopUsername_tHiveRow_1 != null) {
					System.setProperty("HADOOP_USER_NAME", originalHadoopUsername_tHiveRow_1);
					globalMap.put("HADOOP_USER_NAME_tHiveRow_1", null);
				} else {
					System.clearProperty("HADOOP_USER_NAME");
				}

				ok_Hash.put("tHiveRow_1", true);
				end_Hash.put("tHiveRow_1", System.currentTimeMillis());

				/**
				 * [tHiveRow_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHiveRow_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tHiveRow_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHiveRow_1 finally ] start
				 */

				currentComponent = "tHiveRow_1";

				/**
				 * [tHiveRow_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHiveRow_1_SUBPROCESS_STATE", 1);
	}

	public void tHiveRow_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHiveRow_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tHiveRow_2 begin ] start
				 */

				ok_Hash.put("tHiveRow_2", false);
				start_Hash.put("tHiveRow_2", System.currentTimeMillis());

				currentComponent = "tHiveRow_2";

				int tos_count_tHiveRow_2 = 0;

				java.sql.Connection conn_tHiveRow_2 = null;
				globalMap.put("current_client_path_separator", System.getProperty("path.separator"));
				System.setProperty("path.separator", ":");
				conn_tHiveRow_2 = (java.sql.Connection) globalMap.get("conn_tHiveConnection_1");

				String dbname_tHiveRow_2 = (String) globalMap.get("db_tHiveConnection_1");
				if (dbname_tHiveRow_2 != null && !"".equals(dbname_tHiveRow_2.trim())
						&& !"default".equals(dbname_tHiveRow_2.trim())) {
					java.sql.Statement goToDatabase_tHiveRow_2 = conn_tHiveRow_2.createStatement();
					goToDatabase_tHiveRow_2.execute("use " + dbname_tHiveRow_2);
					goToDatabase_tHiveRow_2.close();
				}

				String dbUser_tHiveRow_2 = (String) globalMap.get("dbUser_tHiveConnection_1");

				globalMap.put("HADOOP_USER_NAME_tHiveRow_2", System.getProperty("HADOOP_USER_NAME"));
				if (dbUser_tHiveRow_2 != null && !"".equals(dbUser_tHiveRow_2.trim())) {
					System.setProperty("HADOOP_USER_NAME", dbUser_tHiveRow_2);
					// make relative file path work for hive
					globalMap.put("current_client_user_name", System.getProperty("user.name"));
					System.setProperty("user.name", dbUser_tHiveRow_2);
				}

				java.sql.Statement stmt_tHiveRow_2 = conn_tHiveRow_2.createStatement();

				String query_tHiveRow_2 = "";
				boolean whetherReject_tHiveRow_2 = false;

				/**
				 * [tHiveRow_2 begin ] stop
				 */

				/**
				 * [tHiveRow_2 main ] start
				 */

				currentComponent = "tHiveRow_2";

				query_tHiveRow_2 = "CREATE VIEW " + context.SatiView
						+ " AS SELECT T1.Nom_Region,AVG(Score_48_2020) AS Score_2020 FROM " + context.SatiTable
						+ " AS T1 JOIN  ( SELECT Identifiant_Organisation, Score_48_2020 FROM " + context.EtabTable
						+ " WHERE !(isnull(score_48_2020)) ) AS T2 ON (T1.Identifiant_organisation = T2.Identifiant_organisation) GROUP BY Nom_Reg"
						+ "ion ";
				whetherReject_tHiveRow_2 = false;

				globalMap.put("tHiveRow_2_QUERY", query_tHiveRow_2);

				try {

					java.text.DateFormat dateStrFormat_tHiveRow_2 = new java.text.SimpleDateFormat("yyyyMMddHHmmss");
					final String queryIdentifier_tHiveRow_2 = projectName + "_" + jobName + "_"
							+ jobVersion.replace(".", "_") + "_tHiveRow_2_"
							+ dateStrFormat_tHiveRow_2.format(new Date(startTime));
// For MapReduce Mode
					stmt_tHiveRow_2.execute("set mapred.job.name=" + queryIdentifier_tHiveRow_2);

					stmt_tHiveRow_2.execute(query_tHiveRow_2);

				} catch (java.lang.Exception e) {
					whetherReject_tHiveRow_2 = true;

					System.err.print(e.getMessage());

				}

				tos_count_tHiveRow_2++;

				/**
				 * [tHiveRow_2 main ] stop
				 */

				/**
				 * [tHiveRow_2 process_data_begin ] start
				 */

				currentComponent = "tHiveRow_2";

				/**
				 * [tHiveRow_2 process_data_begin ] stop
				 */

				/**
				 * [tHiveRow_2 process_data_end ] start
				 */

				currentComponent = "tHiveRow_2";

				/**
				 * [tHiveRow_2 process_data_end ] stop
				 */

				/**
				 * [tHiveRow_2 end ] start
				 */

				currentComponent = "tHiveRow_2";

				stmt_tHiveRow_2.close();

				String currentClientPathSeparator_tHiveRow_2 = (String) globalMap.get("current_client_path_separator");
				if (currentClientPathSeparator_tHiveRow_2 != null) {
					System.setProperty("path.separator", currentClientPathSeparator_tHiveRow_2);
					globalMap.put("current_client_path_separator", null);
				}

				String currentClientUsername_tHiveRow_2 = (String) globalMap.get("current_client_user_name");
				if (currentClientUsername_tHiveRow_2 != null) {
					System.setProperty("user.name", currentClientUsername_tHiveRow_2);
					globalMap.put("current_client_user_name", null);
				}

				String originalHadoopUsername_tHiveRow_2 = (String) globalMap.get("HADOOP_USER_NAME_tHiveRow_2");
				if (originalHadoopUsername_tHiveRow_2 != null) {
					System.setProperty("HADOOP_USER_NAME", originalHadoopUsername_tHiveRow_2);
					globalMap.put("HADOOP_USER_NAME_tHiveRow_2", null);
				} else {
					System.clearProperty("HADOOP_USER_NAME");
				}

				ok_Hash.put("tHiveRow_2", true);
				end_Hash.put("tHiveRow_2", System.currentTimeMillis());

				/**
				 * [tHiveRow_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHiveRow_2 finally ] start
				 */

				currentComponent = "tHiveRow_2";

				/**
				 * [tHiveRow_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHiveRow_2_SUBPROCESS_STATE", 1);
	}

	public void tHiveRow_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHiveRow_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tHiveRow_9 begin ] start
				 */

				ok_Hash.put("tHiveRow_9", false);
				start_Hash.put("tHiveRow_9", System.currentTimeMillis());

				currentComponent = "tHiveRow_9";

				int tos_count_tHiveRow_9 = 0;

				java.sql.Connection conn_tHiveRow_9 = null;
				globalMap.put("current_client_path_separator", System.getProperty("path.separator"));
				System.setProperty("path.separator", ":");
				conn_tHiveRow_9 = (java.sql.Connection) globalMap.get("conn_tHiveConnection_1");

				String dbname_tHiveRow_9 = (String) globalMap.get("db_tHiveConnection_1");
				if (dbname_tHiveRow_9 != null && !"".equals(dbname_tHiveRow_9.trim())
						&& !"default".equals(dbname_tHiveRow_9.trim())) {
					java.sql.Statement goToDatabase_tHiveRow_9 = conn_tHiveRow_9.createStatement();
					goToDatabase_tHiveRow_9.execute("use " + dbname_tHiveRow_9);
					goToDatabase_tHiveRow_9.close();
				}

				String dbUser_tHiveRow_9 = (String) globalMap.get("dbUser_tHiveConnection_1");

				globalMap.put("HADOOP_USER_NAME_tHiveRow_9", System.getProperty("HADOOP_USER_NAME"));
				if (dbUser_tHiveRow_9 != null && !"".equals(dbUser_tHiveRow_9.trim())) {
					System.setProperty("HADOOP_USER_NAME", dbUser_tHiveRow_9);
					// make relative file path work for hive
					globalMap.put("current_client_user_name", System.getProperty("user.name"));
					System.setProperty("user.name", dbUser_tHiveRow_9);
				}

				java.sql.Statement stmt_tHiveRow_9 = conn_tHiveRow_9.createStatement();

				String query_tHiveRow_9 = "";
				boolean whetherReject_tHiveRow_9 = false;

				/**
				 * [tHiveRow_9 begin ] stop
				 */

				/**
				 * [tHiveRow_9 main ] start
				 */

				currentComponent = "tHiveRow_9";

				query_tHiveRow_9 = "DROP VIEW IF EXISTS " + context.ConsuDiagView;
				whetherReject_tHiveRow_9 = false;

				globalMap.put("tHiveRow_9_QUERY", query_tHiveRow_9);

				try {

					java.text.DateFormat dateStrFormat_tHiveRow_9 = new java.text.SimpleDateFormat("yyyyMMddHHmmss");
					final String queryIdentifier_tHiveRow_9 = projectName + "_" + jobName + "_"
							+ jobVersion.replace(".", "_") + "_tHiveRow_9_"
							+ dateStrFormat_tHiveRow_9.format(new Date(startTime));
// For MapReduce Mode
					stmt_tHiveRow_9.execute("set mapred.job.name=" + queryIdentifier_tHiveRow_9);

					stmt_tHiveRow_9.execute(query_tHiveRow_9);

				} catch (java.lang.Exception e) {
					whetherReject_tHiveRow_9 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tHiveRow_9) {

				}

				tos_count_tHiveRow_9++;

				/**
				 * [tHiveRow_9 main ] stop
				 */

				/**
				 * [tHiveRow_9 process_data_begin ] start
				 */

				currentComponent = "tHiveRow_9";

				/**
				 * [tHiveRow_9 process_data_begin ] stop
				 */

				/**
				 * [tHiveRow_9 process_data_end ] start
				 */

				currentComponent = "tHiveRow_9";

				/**
				 * [tHiveRow_9 process_data_end ] stop
				 */

				/**
				 * [tHiveRow_9 end ] start
				 */

				currentComponent = "tHiveRow_9";

				stmt_tHiveRow_9.close();

				String currentClientPathSeparator_tHiveRow_9 = (String) globalMap.get("current_client_path_separator");
				if (currentClientPathSeparator_tHiveRow_9 != null) {
					System.setProperty("path.separator", currentClientPathSeparator_tHiveRow_9);
					globalMap.put("current_client_path_separator", null);
				}

				String currentClientUsername_tHiveRow_9 = (String) globalMap.get("current_client_user_name");
				if (currentClientUsername_tHiveRow_9 != null) {
					System.setProperty("user.name", currentClientUsername_tHiveRow_9);
					globalMap.put("current_client_user_name", null);
				}

				String originalHadoopUsername_tHiveRow_9 = (String) globalMap.get("HADOOP_USER_NAME_tHiveRow_9");
				if (originalHadoopUsername_tHiveRow_9 != null) {
					System.setProperty("HADOOP_USER_NAME", originalHadoopUsername_tHiveRow_9);
					globalMap.put("HADOOP_USER_NAME_tHiveRow_9", null);
				} else {
					System.clearProperty("HADOOP_USER_NAME");
				}

				ok_Hash.put("tHiveRow_9", true);
				end_Hash.put("tHiveRow_9", System.currentTimeMillis());

				/**
				 * [tHiveRow_9 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHiveRow_9:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
			}

			tHiveRow_10Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHiveRow_9 finally ] start
				 */

				currentComponent = "tHiveRow_9";

				/**
				 * [tHiveRow_9 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHiveRow_9_SUBPROCESS_STATE", 1);
	}

	public void tHiveRow_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHiveRow_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tHiveRow_10 begin ] start
				 */

				ok_Hash.put("tHiveRow_10", false);
				start_Hash.put("tHiveRow_10", System.currentTimeMillis());

				currentComponent = "tHiveRow_10";

				int tos_count_tHiveRow_10 = 0;

				java.sql.Connection conn_tHiveRow_10 = null;
				globalMap.put("current_client_path_separator", System.getProperty("path.separator"));
				System.setProperty("path.separator", ":");
				conn_tHiveRow_10 = (java.sql.Connection) globalMap.get("conn_tHiveConnection_1");

				String dbname_tHiveRow_10 = (String) globalMap.get("db_tHiveConnection_1");
				if (dbname_tHiveRow_10 != null && !"".equals(dbname_tHiveRow_10.trim())
						&& !"default".equals(dbname_tHiveRow_10.trim())) {
					java.sql.Statement goToDatabase_tHiveRow_10 = conn_tHiveRow_10.createStatement();
					goToDatabase_tHiveRow_10.execute("use " + dbname_tHiveRow_10);
					goToDatabase_tHiveRow_10.close();
				}

				String dbUser_tHiveRow_10 = (String) globalMap.get("dbUser_tHiveConnection_1");

				globalMap.put("HADOOP_USER_NAME_tHiveRow_10", System.getProperty("HADOOP_USER_NAME"));
				if (dbUser_tHiveRow_10 != null && !"".equals(dbUser_tHiveRow_10.trim())) {
					System.setProperty("HADOOP_USER_NAME", dbUser_tHiveRow_10);
					// make relative file path work for hive
					globalMap.put("current_client_user_name", System.getProperty("user.name"));
					System.setProperty("user.name", dbUser_tHiveRow_10);
				}

				java.sql.Statement stmt_tHiveRow_10 = conn_tHiveRow_10.createStatement();

				String query_tHiveRow_10 = "";
				boolean whetherReject_tHiveRow_10 = false;

				/**
				 * [tHiveRow_10 begin ] stop
				 */

				/**
				 * [tHiveRow_10 main ] start
				 */

				currentComponent = "tHiveRow_10";

				query_tHiveRow_10 = "CREATE VIEW " + context.ConsuDiagView
						+ " AS SELECT TF.Num_Consultation,Temps_Debut,Temps_Fin,Diagnostic FROM ( SELECT T1.Num_Consultation,Temps_Debut,Temps_Fin"
						+ ",Code_Diag FROM " + context.RDVTable + " T1 JOIN " + context.ConsuTable
						+ " T2 ON ( T1.Num_Consultation = T2.Num_Consultation ) ) TF JOIN " + context.DiagTable
						+ " T3 ON (TF.Code_Diag = T3.Code_Diag)";
				whetherReject_tHiveRow_10 = false;

				globalMap.put("tHiveRow_10_QUERY", query_tHiveRow_10);

				try {

					java.text.DateFormat dateStrFormat_tHiveRow_10 = new java.text.SimpleDateFormat("yyyyMMddHHmmss");
					final String queryIdentifier_tHiveRow_10 = projectName + "_" + jobName + "_"
							+ jobVersion.replace(".", "_") + "_tHiveRow_10_"
							+ dateStrFormat_tHiveRow_10.format(new Date(startTime));
// For MapReduce Mode
					stmt_tHiveRow_10.execute("set mapred.job.name=" + queryIdentifier_tHiveRow_10);

					stmt_tHiveRow_10.execute(query_tHiveRow_10);

				} catch (java.lang.Exception e) {
					whetherReject_tHiveRow_10 = true;

					System.err.print(e.getMessage());

				}

				tos_count_tHiveRow_10++;

				/**
				 * [tHiveRow_10 main ] stop
				 */

				/**
				 * [tHiveRow_10 process_data_begin ] start
				 */

				currentComponent = "tHiveRow_10";

				/**
				 * [tHiveRow_10 process_data_begin ] stop
				 */

				/**
				 * [tHiveRow_10 process_data_end ] start
				 */

				currentComponent = "tHiveRow_10";

				/**
				 * [tHiveRow_10 process_data_end ] stop
				 */

				/**
				 * [tHiveRow_10 end ] start
				 */

				currentComponent = "tHiveRow_10";

				stmt_tHiveRow_10.close();

				String currentClientPathSeparator_tHiveRow_10 = (String) globalMap.get("current_client_path_separator");
				if (currentClientPathSeparator_tHiveRow_10 != null) {
					System.setProperty("path.separator", currentClientPathSeparator_tHiveRow_10);
					globalMap.put("current_client_path_separator", null);
				}

				String currentClientUsername_tHiveRow_10 = (String) globalMap.get("current_client_user_name");
				if (currentClientUsername_tHiveRow_10 != null) {
					System.setProperty("user.name", currentClientUsername_tHiveRow_10);
					globalMap.put("current_client_user_name", null);
				}

				String originalHadoopUsername_tHiveRow_10 = (String) globalMap.get("HADOOP_USER_NAME_tHiveRow_10");
				if (originalHadoopUsername_tHiveRow_10 != null) {
					System.setProperty("HADOOP_USER_NAME", originalHadoopUsername_tHiveRow_10);
					globalMap.put("HADOOP_USER_NAME_tHiveRow_10", null);
				} else {
					System.clearProperty("HADOOP_USER_NAME");
				}

				ok_Hash.put("tHiveRow_10", true);
				end_Hash.put("tHiveRow_10", System.currentTimeMillis());

				/**
				 * [tHiveRow_10 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHiveRow_10 finally ] start
				 */

				currentComponent = "tHiveRow_10";

				/**
				 * [tHiveRow_10 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHiveRow_10_SUBPROCESS_STATE", 1);
	}

	public void tHiveRow_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHiveRow_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tHiveRow_5 begin ] start
				 */

				ok_Hash.put("tHiveRow_5", false);
				start_Hash.put("tHiveRow_5", System.currentTimeMillis());

				currentComponent = "tHiveRow_5";

				int tos_count_tHiveRow_5 = 0;

				java.sql.Connection conn_tHiveRow_5 = null;
				globalMap.put("current_client_path_separator", System.getProperty("path.separator"));
				System.setProperty("path.separator", ":");
				conn_tHiveRow_5 = (java.sql.Connection) globalMap.get("conn_tHiveConnection_1");

				String dbname_tHiveRow_5 = (String) globalMap.get("db_tHiveConnection_1");
				if (dbname_tHiveRow_5 != null && !"".equals(dbname_tHiveRow_5.trim())
						&& !"default".equals(dbname_tHiveRow_5.trim())) {
					java.sql.Statement goToDatabase_tHiveRow_5 = conn_tHiveRow_5.createStatement();
					goToDatabase_tHiveRow_5.execute("use " + dbname_tHiveRow_5);
					goToDatabase_tHiveRow_5.close();
				}

				String dbUser_tHiveRow_5 = (String) globalMap.get("dbUser_tHiveConnection_1");

				globalMap.put("HADOOP_USER_NAME_tHiveRow_5", System.getProperty("HADOOP_USER_NAME"));
				if (dbUser_tHiveRow_5 != null && !"".equals(dbUser_tHiveRow_5.trim())) {
					System.setProperty("HADOOP_USER_NAME", dbUser_tHiveRow_5);
					// make relative file path work for hive
					globalMap.put("current_client_user_name", System.getProperty("user.name"));
					System.setProperty("user.name", dbUser_tHiveRow_5);
				}

				java.sql.Statement stmt_tHiveRow_5 = conn_tHiveRow_5.createStatement();

				String query_tHiveRow_5 = "";
				boolean whetherReject_tHiveRow_5 = false;

				/**
				 * [tHiveRow_5 begin ] stop
				 */

				/**
				 * [tHiveRow_5 main ] start
				 */

				currentComponent = "tHiveRow_5";

				query_tHiveRow_5 = "DROP VIEW IF EXISTS " + context.ConsuProView;
				whetherReject_tHiveRow_5 = false;

				globalMap.put("tHiveRow_5_QUERY", query_tHiveRow_5);

				try {

					java.text.DateFormat dateStrFormat_tHiveRow_5 = new java.text.SimpleDateFormat("yyyyMMddHHmmss");
					final String queryIdentifier_tHiveRow_5 = projectName + "_" + jobName + "_"
							+ jobVersion.replace(".", "_") + "_tHiveRow_5_"
							+ dateStrFormat_tHiveRow_5.format(new Date(startTime));
// For MapReduce Mode
					stmt_tHiveRow_5.execute("set mapred.job.name=" + queryIdentifier_tHiveRow_5);

					stmt_tHiveRow_5.execute(query_tHiveRow_5);

				} catch (java.lang.Exception e) {
					whetherReject_tHiveRow_5 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tHiveRow_5) {

				}

				tos_count_tHiveRow_5++;

				/**
				 * [tHiveRow_5 main ] stop
				 */

				/**
				 * [tHiveRow_5 process_data_begin ] start
				 */

				currentComponent = "tHiveRow_5";

				/**
				 * [tHiveRow_5 process_data_begin ] stop
				 */

				/**
				 * [tHiveRow_5 process_data_end ] start
				 */

				currentComponent = "tHiveRow_5";

				/**
				 * [tHiveRow_5 process_data_end ] stop
				 */

				/**
				 * [tHiveRow_5 end ] start
				 */

				currentComponent = "tHiveRow_5";

				stmt_tHiveRow_5.close();

				String currentClientPathSeparator_tHiveRow_5 = (String) globalMap.get("current_client_path_separator");
				if (currentClientPathSeparator_tHiveRow_5 != null) {
					System.setProperty("path.separator", currentClientPathSeparator_tHiveRow_5);
					globalMap.put("current_client_path_separator", null);
				}

				String currentClientUsername_tHiveRow_5 = (String) globalMap.get("current_client_user_name");
				if (currentClientUsername_tHiveRow_5 != null) {
					System.setProperty("user.name", currentClientUsername_tHiveRow_5);
					globalMap.put("current_client_user_name", null);
				}

				String originalHadoopUsername_tHiveRow_5 = (String) globalMap.get("HADOOP_USER_NAME_tHiveRow_5");
				if (originalHadoopUsername_tHiveRow_5 != null) {
					System.setProperty("HADOOP_USER_NAME", originalHadoopUsername_tHiveRow_5);
					globalMap.put("HADOOP_USER_NAME_tHiveRow_5", null);
				} else {
					System.clearProperty("HADOOP_USER_NAME");
				}

				ok_Hash.put("tHiveRow_5", true);
				end_Hash.put("tHiveRow_5", System.currentTimeMillis());

				/**
				 * [tHiveRow_5 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHiveRow_5:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
			}

			tHiveRow_6Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHiveRow_5 finally ] start
				 */

				currentComponent = "tHiveRow_5";

				/**
				 * [tHiveRow_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHiveRow_5_SUBPROCESS_STATE", 1);
	}

	public void tHiveRow_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHiveRow_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tHiveRow_6 begin ] start
				 */

				ok_Hash.put("tHiveRow_6", false);
				start_Hash.put("tHiveRow_6", System.currentTimeMillis());

				currentComponent = "tHiveRow_6";

				int tos_count_tHiveRow_6 = 0;

				java.sql.Connection conn_tHiveRow_6 = null;
				globalMap.put("current_client_path_separator", System.getProperty("path.separator"));
				System.setProperty("path.separator", ":");
				conn_tHiveRow_6 = (java.sql.Connection) globalMap.get("conn_tHiveConnection_1");

				String dbname_tHiveRow_6 = (String) globalMap.get("db_tHiveConnection_1");
				if (dbname_tHiveRow_6 != null && !"".equals(dbname_tHiveRow_6.trim())
						&& !"default".equals(dbname_tHiveRow_6.trim())) {
					java.sql.Statement goToDatabase_tHiveRow_6 = conn_tHiveRow_6.createStatement();
					goToDatabase_tHiveRow_6.execute("use " + dbname_tHiveRow_6);
					goToDatabase_tHiveRow_6.close();
				}

				String dbUser_tHiveRow_6 = (String) globalMap.get("dbUser_tHiveConnection_1");

				globalMap.put("HADOOP_USER_NAME_tHiveRow_6", System.getProperty("HADOOP_USER_NAME"));
				if (dbUser_tHiveRow_6 != null && !"".equals(dbUser_tHiveRow_6.trim())) {
					System.setProperty("HADOOP_USER_NAME", dbUser_tHiveRow_6);
					// make relative file path work for hive
					globalMap.put("current_client_user_name", System.getProperty("user.name"));
					System.setProperty("user.name", dbUser_tHiveRow_6);
				}

				java.sql.Statement stmt_tHiveRow_6 = conn_tHiveRow_6.createStatement();

				String query_tHiveRow_6 = "";
				boolean whetherReject_tHiveRow_6 = false;

				/**
				 * [tHiveRow_6 begin ] stop
				 */

				/**
				 * [tHiveRow_6 main ] start
				 */

				currentComponent = "tHiveRow_6";

				query_tHiveRow_6 = "CREATE VIEW " + context.ConsuProView + " AS SELECT full_name,Taux FROM "
						+ context.ProfTable
						+ " TD JOIN ( SELECT T1.Id_prof_sante, (Value/Total)*100 AS Taux FROM ( SELECT Id_prof_sante,Count(Num_Consultation) AS Va"
						+ "lue FROM " + context.ConsuTable
						+ " GROUP BY Id_prof_sante) T1 JOIN (SELECT  COUNT(Num_Consultation) AS Total FROM "
						+ context.ConsuTable + " ) Total ON (1=1) ) TF ON (TF.Id_prof_sante = TD.Identifiant) ";
				whetherReject_tHiveRow_6 = false;

				globalMap.put("tHiveRow_6_QUERY", query_tHiveRow_6);

				try {

					java.text.DateFormat dateStrFormat_tHiveRow_6 = new java.text.SimpleDateFormat("yyyyMMddHHmmss");
					final String queryIdentifier_tHiveRow_6 = projectName + "_" + jobName + "_"
							+ jobVersion.replace(".", "_") + "_tHiveRow_6_"
							+ dateStrFormat_tHiveRow_6.format(new Date(startTime));
// For MapReduce Mode
					stmt_tHiveRow_6.execute("set mapred.job.name=" + queryIdentifier_tHiveRow_6);

					stmt_tHiveRow_6.execute(query_tHiveRow_6);

				} catch (java.lang.Exception e) {
					whetherReject_tHiveRow_6 = true;

					System.err.print(e.getMessage());

				}

				tos_count_tHiveRow_6++;

				/**
				 * [tHiveRow_6 main ] stop
				 */

				/**
				 * [tHiveRow_6 process_data_begin ] start
				 */

				currentComponent = "tHiveRow_6";

				/**
				 * [tHiveRow_6 process_data_begin ] stop
				 */

				/**
				 * [tHiveRow_6 process_data_end ] start
				 */

				currentComponent = "tHiveRow_6";

				/**
				 * [tHiveRow_6 process_data_end ] stop
				 */

				/**
				 * [tHiveRow_6 end ] start
				 */

				currentComponent = "tHiveRow_6";

				stmt_tHiveRow_6.close();

				String currentClientPathSeparator_tHiveRow_6 = (String) globalMap.get("current_client_path_separator");
				if (currentClientPathSeparator_tHiveRow_6 != null) {
					System.setProperty("path.separator", currentClientPathSeparator_tHiveRow_6);
					globalMap.put("current_client_path_separator", null);
				}

				String currentClientUsername_tHiveRow_6 = (String) globalMap.get("current_client_user_name");
				if (currentClientUsername_tHiveRow_6 != null) {
					System.setProperty("user.name", currentClientUsername_tHiveRow_6);
					globalMap.put("current_client_user_name", null);
				}

				String originalHadoopUsername_tHiveRow_6 = (String) globalMap.get("HADOOP_USER_NAME_tHiveRow_6");
				if (originalHadoopUsername_tHiveRow_6 != null) {
					System.setProperty("HADOOP_USER_NAME", originalHadoopUsername_tHiveRow_6);
					globalMap.put("HADOOP_USER_NAME_tHiveRow_6", null);
				} else {
					System.clearProperty("HADOOP_USER_NAME");
				}

				ok_Hash.put("tHiveRow_6", true);
				end_Hash.put("tHiveRow_6", System.currentTimeMillis());

				/**
				 * [tHiveRow_6 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHiveRow_6 finally ] start
				 */

				currentComponent = "tHiveRow_6";

				/**
				 * [tHiveRow_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHiveRow_6_SUBPROCESS_STATE", 1);
	}

	public void tHiveRow_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHiveRow_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tHiveRow_3 begin ] start
				 */

				ok_Hash.put("tHiveRow_3", false);
				start_Hash.put("tHiveRow_3", System.currentTimeMillis());

				currentComponent = "tHiveRow_3";

				int tos_count_tHiveRow_3 = 0;

				java.sql.Connection conn_tHiveRow_3 = null;
				globalMap.put("current_client_path_separator", System.getProperty("path.separator"));
				System.setProperty("path.separator", ":");
				conn_tHiveRow_3 = (java.sql.Connection) globalMap.get("conn_tHiveConnection_1");

				String dbname_tHiveRow_3 = (String) globalMap.get("db_tHiveConnection_1");
				if (dbname_tHiveRow_3 != null && !"".equals(dbname_tHiveRow_3.trim())
						&& !"default".equals(dbname_tHiveRow_3.trim())) {
					java.sql.Statement goToDatabase_tHiveRow_3 = conn_tHiveRow_3.createStatement();
					goToDatabase_tHiveRow_3.execute("use " + dbname_tHiveRow_3);
					goToDatabase_tHiveRow_3.close();
				}

				String dbUser_tHiveRow_3 = (String) globalMap.get("dbUser_tHiveConnection_1");

				globalMap.put("HADOOP_USER_NAME_tHiveRow_3", System.getProperty("HADOOP_USER_NAME"));
				if (dbUser_tHiveRow_3 != null && !"".equals(dbUser_tHiveRow_3.trim())) {
					System.setProperty("HADOOP_USER_NAME", dbUser_tHiveRow_3);
					// make relative file path work for hive
					globalMap.put("current_client_user_name", System.getProperty("user.name"));
					System.setProperty("user.name", dbUser_tHiveRow_3);
				}

				java.sql.Statement stmt_tHiveRow_3 = conn_tHiveRow_3.createStatement();

				String query_tHiveRow_3 = "";
				boolean whetherReject_tHiveRow_3 = false;

				/**
				 * [tHiveRow_3 begin ] stop
				 */

				/**
				 * [tHiveRow_3 main ] start
				 */

				currentComponent = "tHiveRow_3";

				query_tHiveRow_3 = "DROP VIEW IF EXISTS " + context.HoscoView;
				whetherReject_tHiveRow_3 = false;

				globalMap.put("tHiveRow_3_QUERY", query_tHiveRow_3);

				try {

					java.text.DateFormat dateStrFormat_tHiveRow_3 = new java.text.SimpleDateFormat("yyyyMMddHHmmss");
					final String queryIdentifier_tHiveRow_3 = projectName + "_" + jobName + "_"
							+ jobVersion.replace(".", "_") + "_tHiveRow_3_"
							+ dateStrFormat_tHiveRow_3.format(new Date(startTime));
// For MapReduce Mode
					stmt_tHiveRow_3.execute("set mapred.job.name=" + queryIdentifier_tHiveRow_3);

					stmt_tHiveRow_3.execute(query_tHiveRow_3);

				} catch (java.lang.Exception e) {
					whetherReject_tHiveRow_3 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tHiveRow_3) {

				}

				tos_count_tHiveRow_3++;

				/**
				 * [tHiveRow_3 main ] stop
				 */

				/**
				 * [tHiveRow_3 process_data_begin ] start
				 */

				currentComponent = "tHiveRow_3";

				/**
				 * [tHiveRow_3 process_data_begin ] stop
				 */

				/**
				 * [tHiveRow_3 process_data_end ] start
				 */

				currentComponent = "tHiveRow_3";

				/**
				 * [tHiveRow_3 process_data_end ] stop
				 */

				/**
				 * [tHiveRow_3 end ] start
				 */

				currentComponent = "tHiveRow_3";

				stmt_tHiveRow_3.close();

				String currentClientPathSeparator_tHiveRow_3 = (String) globalMap.get("current_client_path_separator");
				if (currentClientPathSeparator_tHiveRow_3 != null) {
					System.setProperty("path.separator", currentClientPathSeparator_tHiveRow_3);
					globalMap.put("current_client_path_separator", null);
				}

				String currentClientUsername_tHiveRow_3 = (String) globalMap.get("current_client_user_name");
				if (currentClientUsername_tHiveRow_3 != null) {
					System.setProperty("user.name", currentClientUsername_tHiveRow_3);
					globalMap.put("current_client_user_name", null);
				}

				String originalHadoopUsername_tHiveRow_3 = (String) globalMap.get("HADOOP_USER_NAME_tHiveRow_3");
				if (originalHadoopUsername_tHiveRow_3 != null) {
					System.setProperty("HADOOP_USER_NAME", originalHadoopUsername_tHiveRow_3);
					globalMap.put("HADOOP_USER_NAME_tHiveRow_3", null);
				} else {
					System.clearProperty("HADOOP_USER_NAME");
				}

				ok_Hash.put("tHiveRow_3", true);
				end_Hash.put("tHiveRow_3", System.currentTimeMillis());

				/**
				 * [tHiveRow_3 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHiveRow_3:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
			}

			tHiveRow_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHiveRow_3 finally ] start
				 */

				currentComponent = "tHiveRow_3";

				/**
				 * [tHiveRow_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHiveRow_3_SUBPROCESS_STATE", 1);
	}

	public void tHiveRow_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHiveRow_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tHiveRow_4 begin ] start
				 */

				ok_Hash.put("tHiveRow_4", false);
				start_Hash.put("tHiveRow_4", System.currentTimeMillis());

				currentComponent = "tHiveRow_4";

				int tos_count_tHiveRow_4 = 0;

				java.sql.Connection conn_tHiveRow_4 = null;
				globalMap.put("current_client_path_separator", System.getProperty("path.separator"));
				System.setProperty("path.separator", ":");
				conn_tHiveRow_4 = (java.sql.Connection) globalMap.get("conn_tHiveConnection_1");

				String dbname_tHiveRow_4 = (String) globalMap.get("db_tHiveConnection_1");
				if (dbname_tHiveRow_4 != null && !"".equals(dbname_tHiveRow_4.trim())
						&& !"default".equals(dbname_tHiveRow_4.trim())) {
					java.sql.Statement goToDatabase_tHiveRow_4 = conn_tHiveRow_4.createStatement();
					goToDatabase_tHiveRow_4.execute("use " + dbname_tHiveRow_4);
					goToDatabase_tHiveRow_4.close();
				}

				String dbUser_tHiveRow_4 = (String) globalMap.get("dbUser_tHiveConnection_1");

				globalMap.put("HADOOP_USER_NAME_tHiveRow_4", System.getProperty("HADOOP_USER_NAME"));
				if (dbUser_tHiveRow_4 != null && !"".equals(dbUser_tHiveRow_4.trim())) {
					System.setProperty("HADOOP_USER_NAME", dbUser_tHiveRow_4);
					// make relative file path work for hive
					globalMap.put("current_client_user_name", System.getProperty("user.name"));
					System.setProperty("user.name", dbUser_tHiveRow_4);
				}

				java.sql.Statement stmt_tHiveRow_4 = conn_tHiveRow_4.createStatement();

				String query_tHiveRow_4 = "";
				boolean whetherReject_tHiveRow_4 = false;

				/**
				 * [tHiveRow_4 begin ] stop
				 */

				/**
				 * [tHiveRow_4 main ] start
				 */

				currentComponent = "tHiveRow_4";

				query_tHiveRow_4 = "CREATE VIEW " + context.HoscoView
						+ " AS SELECT T1.Age, T1.Sexe, (SUM(T2.Nb_Hospitalisation)/SUM(T2.Nb_Consultation))*100 AS Score_2020 FROM "
						+ context.PatientTable + " T1 JOIN " + context.HoscoTable
						+ " T2 ON (T1.Id_Patient = T2.Id_Patient) GROUP BY T1.Age,T1.Sexe ";
				whetherReject_tHiveRow_4 = false;

				globalMap.put("tHiveRow_4_QUERY", query_tHiveRow_4);

				try {

					java.text.DateFormat dateStrFormat_tHiveRow_4 = new java.text.SimpleDateFormat("yyyyMMddHHmmss");
					final String queryIdentifier_tHiveRow_4 = projectName + "_" + jobName + "_"
							+ jobVersion.replace(".", "_") + "_tHiveRow_4_"
							+ dateStrFormat_tHiveRow_4.format(new Date(startTime));
// For MapReduce Mode
					stmt_tHiveRow_4.execute("set mapred.job.name=" + queryIdentifier_tHiveRow_4);

					stmt_tHiveRow_4.execute(query_tHiveRow_4);

				} catch (java.lang.Exception e) {
					whetherReject_tHiveRow_4 = true;

					System.err.print(e.getMessage());

				}

				tos_count_tHiveRow_4++;

				/**
				 * [tHiveRow_4 main ] stop
				 */

				/**
				 * [tHiveRow_4 process_data_begin ] start
				 */

				currentComponent = "tHiveRow_4";

				/**
				 * [tHiveRow_4 process_data_begin ] stop
				 */

				/**
				 * [tHiveRow_4 process_data_end ] start
				 */

				currentComponent = "tHiveRow_4";

				/**
				 * [tHiveRow_4 process_data_end ] stop
				 */

				/**
				 * [tHiveRow_4 end ] start
				 */

				currentComponent = "tHiveRow_4";

				stmt_tHiveRow_4.close();

				String currentClientPathSeparator_tHiveRow_4 = (String) globalMap.get("current_client_path_separator");
				if (currentClientPathSeparator_tHiveRow_4 != null) {
					System.setProperty("path.separator", currentClientPathSeparator_tHiveRow_4);
					globalMap.put("current_client_path_separator", null);
				}

				String currentClientUsername_tHiveRow_4 = (String) globalMap.get("current_client_user_name");
				if (currentClientUsername_tHiveRow_4 != null) {
					System.setProperty("user.name", currentClientUsername_tHiveRow_4);
					globalMap.put("current_client_user_name", null);
				}

				String originalHadoopUsername_tHiveRow_4 = (String) globalMap.get("HADOOP_USER_NAME_tHiveRow_4");
				if (originalHadoopUsername_tHiveRow_4 != null) {
					System.setProperty("HADOOP_USER_NAME", originalHadoopUsername_tHiveRow_4);
					globalMap.put("HADOOP_USER_NAME_tHiveRow_4", null);
				} else {
					System.clearProperty("HADOOP_USER_NAME");
				}

				ok_Hash.put("tHiveRow_4", true);
				end_Hash.put("tHiveRow_4", System.currentTimeMillis());

				/**
				 * [tHiveRow_4 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHiveRow_4 finally ] start
				 */

				currentComponent = "tHiveRow_4";

				/**
				 * [tHiveRow_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHiveRow_4_SUBPROCESS_STATE", 1);
	}

	public void tHiveRow_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHiveRow_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tHiveRow_7 begin ] start
				 */

				ok_Hash.put("tHiveRow_7", false);
				start_Hash.put("tHiveRow_7", System.currentTimeMillis());

				currentComponent = "tHiveRow_7";

				int tos_count_tHiveRow_7 = 0;

				java.sql.Connection conn_tHiveRow_7 = null;
				globalMap.put("current_client_path_separator", System.getProperty("path.separator"));
				System.setProperty("path.separator", ":");
				conn_tHiveRow_7 = (java.sql.Connection) globalMap.get("conn_tHiveConnection_1");

				String dbname_tHiveRow_7 = (String) globalMap.get("db_tHiveConnection_1");
				if (dbname_tHiveRow_7 != null && !"".equals(dbname_tHiveRow_7.trim())
						&& !"default".equals(dbname_tHiveRow_7.trim())) {
					java.sql.Statement goToDatabase_tHiveRow_7 = conn_tHiveRow_7.createStatement();
					goToDatabase_tHiveRow_7.execute("use " + dbname_tHiveRow_7);
					goToDatabase_tHiveRow_7.close();
				}

				String dbUser_tHiveRow_7 = (String) globalMap.get("dbUser_tHiveConnection_1");

				globalMap.put("HADOOP_USER_NAME_tHiveRow_7", System.getProperty("HADOOP_USER_NAME"));
				if (dbUser_tHiveRow_7 != null && !"".equals(dbUser_tHiveRow_7.trim())) {
					System.setProperty("HADOOP_USER_NAME", dbUser_tHiveRow_7);
					// make relative file path work for hive
					globalMap.put("current_client_user_name", System.getProperty("user.name"));
					System.setProperty("user.name", dbUser_tHiveRow_7);
				}

				java.sql.Statement stmt_tHiveRow_7 = conn_tHiveRow_7.createStatement();

				String query_tHiveRow_7 = "";
				boolean whetherReject_tHiveRow_7 = false;

				/**
				 * [tHiveRow_7 begin ] stop
				 */

				/**
				 * [tHiveRow_7 main ] start
				 */

				currentComponent = "tHiveRow_7";

				query_tHiveRow_7 = "DROP VIEW IF EXISTS " + context.HospiDiagView;
				whetherReject_tHiveRow_7 = false;

				globalMap.put("tHiveRow_7_QUERY", query_tHiveRow_7);

				try {

					java.text.DateFormat dateStrFormat_tHiveRow_7 = new java.text.SimpleDateFormat("yyyyMMddHHmmss");
					final String queryIdentifier_tHiveRow_7 = projectName + "_" + jobName + "_"
							+ jobVersion.replace(".", "_") + "_tHiveRow_7_"
							+ dateStrFormat_tHiveRow_7.format(new Date(startTime));
// For MapReduce Mode
					stmt_tHiveRow_7.execute("set mapred.job.name=" + queryIdentifier_tHiveRow_7);

					stmt_tHiveRow_7.execute(query_tHiveRow_7);

				} catch (java.lang.Exception e) {
					whetherReject_tHiveRow_7 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tHiveRow_7) {

				}

				tos_count_tHiveRow_7++;

				/**
				 * [tHiveRow_7 main ] stop
				 */

				/**
				 * [tHiveRow_7 process_data_begin ] start
				 */

				currentComponent = "tHiveRow_7";

				/**
				 * [tHiveRow_7 process_data_begin ] stop
				 */

				/**
				 * [tHiveRow_7 process_data_end ] start
				 */

				currentComponent = "tHiveRow_7";

				/**
				 * [tHiveRow_7 process_data_end ] stop
				 */

				/**
				 * [tHiveRow_7 end ] start
				 */

				currentComponent = "tHiveRow_7";

				stmt_tHiveRow_7.close();

				String currentClientPathSeparator_tHiveRow_7 = (String) globalMap.get("current_client_path_separator");
				if (currentClientPathSeparator_tHiveRow_7 != null) {
					System.setProperty("path.separator", currentClientPathSeparator_tHiveRow_7);
					globalMap.put("current_client_path_separator", null);
				}

				String currentClientUsername_tHiveRow_7 = (String) globalMap.get("current_client_user_name");
				if (currentClientUsername_tHiveRow_7 != null) {
					System.setProperty("user.name", currentClientUsername_tHiveRow_7);
					globalMap.put("current_client_user_name", null);
				}

				String originalHadoopUsername_tHiveRow_7 = (String) globalMap.get("HADOOP_USER_NAME_tHiveRow_7");
				if (originalHadoopUsername_tHiveRow_7 != null) {
					System.setProperty("HADOOP_USER_NAME", originalHadoopUsername_tHiveRow_7);
					globalMap.put("HADOOP_USER_NAME_tHiveRow_7", null);
				} else {
					System.clearProperty("HADOOP_USER_NAME");
				}

				ok_Hash.put("tHiveRow_7", true);
				end_Hash.put("tHiveRow_7", System.currentTimeMillis());

				/**
				 * [tHiveRow_7 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHiveRow_7:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
			}

			tHiveRow_8Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHiveRow_7 finally ] start
				 */

				currentComponent = "tHiveRow_7";

				/**
				 * [tHiveRow_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHiveRow_7_SUBPROCESS_STATE", 1);
	}

	public void tHiveRow_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHiveRow_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tHiveRow_8 begin ] start
				 */

				ok_Hash.put("tHiveRow_8", false);
				start_Hash.put("tHiveRow_8", System.currentTimeMillis());

				currentComponent = "tHiveRow_8";

				int tos_count_tHiveRow_8 = 0;

				java.sql.Connection conn_tHiveRow_8 = null;
				globalMap.put("current_client_path_separator", System.getProperty("path.separator"));
				System.setProperty("path.separator", ":");
				conn_tHiveRow_8 = (java.sql.Connection) globalMap.get("conn_tHiveConnection_1");

				String dbname_tHiveRow_8 = (String) globalMap.get("db_tHiveConnection_1");
				if (dbname_tHiveRow_8 != null && !"".equals(dbname_tHiveRow_8.trim())
						&& !"default".equals(dbname_tHiveRow_8.trim())) {
					java.sql.Statement goToDatabase_tHiveRow_8 = conn_tHiveRow_8.createStatement();
					goToDatabase_tHiveRow_8.execute("use " + dbname_tHiveRow_8);
					goToDatabase_tHiveRow_8.close();
				}

				String dbUser_tHiveRow_8 = (String) globalMap.get("dbUser_tHiveConnection_1");

				globalMap.put("HADOOP_USER_NAME_tHiveRow_8", System.getProperty("HADOOP_USER_NAME"));
				if (dbUser_tHiveRow_8 != null && !"".equals(dbUser_tHiveRow_8.trim())) {
					System.setProperty("HADOOP_USER_NAME", dbUser_tHiveRow_8);
					// make relative file path work for hive
					globalMap.put("current_client_user_name", System.getProperty("user.name"));
					System.setProperty("user.name", dbUser_tHiveRow_8);
				}

				java.sql.Statement stmt_tHiveRow_8 = conn_tHiveRow_8.createStatement();

				String query_tHiveRow_8 = "";
				boolean whetherReject_tHiveRow_8 = false;

				/**
				 * [tHiveRow_8 begin ] stop
				 */

				/**
				 * [tHiveRow_8 main ] start
				 */

				currentComponent = "tHiveRow_8";

				query_tHiveRow_8 = "CREATE VIEW " + context.HospiDiagView
						+ " AS SELECT T1.Num_Hospitalisation,Date_Entree,Date_Sortie,Diagnostic FROM "
						+ context.VisiteTable + " T1 JOIN " + context.HospiTable
						+ " T2 ON ( T1.Num_Hospitalisation = T2.Num_Hospitalisation ) JOIN " + context.DiagTable
						+ " T3 ON (T2.Code_Diagnostic = T3.Code_Diag)";
				whetherReject_tHiveRow_8 = false;

				globalMap.put("tHiveRow_8_QUERY", query_tHiveRow_8);

				try {

					java.text.DateFormat dateStrFormat_tHiveRow_8 = new java.text.SimpleDateFormat("yyyyMMddHHmmss");
					final String queryIdentifier_tHiveRow_8 = projectName + "_" + jobName + "_"
							+ jobVersion.replace(".", "_") + "_tHiveRow_8_"
							+ dateStrFormat_tHiveRow_8.format(new Date(startTime));
// For MapReduce Mode
					stmt_tHiveRow_8.execute("set mapred.job.name=" + queryIdentifier_tHiveRow_8);

					stmt_tHiveRow_8.execute(query_tHiveRow_8);

				} catch (java.lang.Exception e) {
					whetherReject_tHiveRow_8 = true;

					System.err.print(e.getMessage());

				}

				tos_count_tHiveRow_8++;

				/**
				 * [tHiveRow_8 main ] stop
				 */

				/**
				 * [tHiveRow_8 process_data_begin ] start
				 */

				currentComponent = "tHiveRow_8";

				/**
				 * [tHiveRow_8 process_data_begin ] stop
				 */

				/**
				 * [tHiveRow_8 process_data_end ] start
				 */

				currentComponent = "tHiveRow_8";

				/**
				 * [tHiveRow_8 process_data_end ] stop
				 */

				/**
				 * [tHiveRow_8 end ] start
				 */

				currentComponent = "tHiveRow_8";

				stmt_tHiveRow_8.close();

				String currentClientPathSeparator_tHiveRow_8 = (String) globalMap.get("current_client_path_separator");
				if (currentClientPathSeparator_tHiveRow_8 != null) {
					System.setProperty("path.separator", currentClientPathSeparator_tHiveRow_8);
					globalMap.put("current_client_path_separator", null);
				}

				String currentClientUsername_tHiveRow_8 = (String) globalMap.get("current_client_user_name");
				if (currentClientUsername_tHiveRow_8 != null) {
					System.setProperty("user.name", currentClientUsername_tHiveRow_8);
					globalMap.put("current_client_user_name", null);
				}

				String originalHadoopUsername_tHiveRow_8 = (String) globalMap.get("HADOOP_USER_NAME_tHiveRow_8");
				if (originalHadoopUsername_tHiveRow_8 != null) {
					System.setProperty("HADOOP_USER_NAME", originalHadoopUsername_tHiveRow_8);
					globalMap.put("HADOOP_USER_NAME_tHiveRow_8", null);
				} else {
					System.clearProperty("HADOOP_USER_NAME");
				}

				ok_Hash.put("tHiveRow_8", true);
				end_Hash.put("tHiveRow_8", System.currentTimeMillis());

				/**
				 * [tHiveRow_8 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHiveRow_8 finally ] start
				 */

				currentComponent = "tHiveRow_8";

				/**
				 * [tHiveRow_8 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHiveRow_8_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final View_Sati View_SatiClass = new View_Sati();

		int exitCode = View_SatiClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = View_Sati.class.getClassLoader()
					.getResourceAsStream("bigdata_project/view_sati_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = View_Sati.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("ConsEtabView", "id_String");
					context.ConsEtabView = (String) context.getProperty("ConsEtabView");
					context.setContextType("ConsuDiagView", "id_String");
					context.ConsuDiagView = (String) context.getProperty("ConsuDiagView");
					context.setContextType("ConsuProView", "id_String");
					context.ConsuProView = (String) context.getProperty("ConsuProView");
					context.setContextType("ConsuTable", "id_String");
					context.ConsuTable = (String) context.getProperty("ConsuTable");
					context.setContextType("DeathTable", "id_String");
					context.DeathTable = (String) context.getProperty("DeathTable");
					context.setContextType("DeathView", "id_String");
					context.DeathView = (String) context.getProperty("DeathView");
					context.setContextType("DiagTable", "id_String");
					context.DiagTable = (String) context.getProperty("DiagTable");
					context.setContextType("EtabTable", "id_String");
					context.EtabTable = (String) context.getProperty("EtabTable");
					context.setContextType("HoscoTable", "id_String");
					context.HoscoTable = (String) context.getProperty("HoscoTable");
					context.setContextType("HoscoView", "id_String");
					context.HoscoView = (String) context.getProperty("HoscoView");
					context.setContextType("HospiDiagView", "id_String");
					context.HospiDiagView = (String) context.getProperty("HospiDiagView");
					context.setContextType("HospiTable", "id_String");
					context.HospiTable = (String) context.getProperty("HospiTable");
					context.setContextType("HosView", "id_String");
					context.HosView = (String) context.getProperty("HosView");
					context.setContextType("PatientTable", "id_String");
					context.PatientTable = (String) context.getProperty("PatientTable");
					context.setContextType("ProfTable", "id_String");
					context.ProfTable = (String) context.getProperty("ProfTable");
					context.setContextType("RDVTable", "id_String");
					context.RDVTable = (String) context.getProperty("RDVTable");
					context.setContextType("SatiTable", "id_String");
					context.SatiTable = (String) context.getProperty("SatiTable");
					context.setContextType("SatiView", "id_String");
					context.SatiView = (String) context.getProperty("SatiView");
					context.setContextType("VisiteTable", "id_String");
					context.VisiteTable = (String) context.getProperty("VisiteTable");
					context.setContextType("ProjectHadoopCluster_JobHistory", "id_String");
					context.ProjectHadoopCluster_JobHistory = (String) context
							.getProperty("ProjectHadoopCluster_JobHistory");
					context.setContextType("ProjectHadoopCluster_NameNodeUri", "id_String");
					context.ProjectHadoopCluster_NameNodeUri = (String) context
							.getProperty("ProjectHadoopCluster_NameNodeUri");
					context.setContextType("ProjectHadoopCluster_ResourceManager", "id_String");
					context.ProjectHadoopCluster_ResourceManager = (String) context
							.getProperty("ProjectHadoopCluster_ResourceManager");
					context.setContextType("ProjectHadoopCluster_ResourceManagerScheduler", "id_String");
					context.ProjectHadoopCluster_ResourceManagerScheduler = (String) context
							.getProperty("ProjectHadoopCluster_ResourceManagerScheduler");
					context.setContextType("ProjectHadoopCluster_User", "id_String");
					context.ProjectHadoopCluster_User = (String) context.getProperty("ProjectHadoopCluster_User");
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("ConsEtabView")) {
				context.ConsEtabView = (String) parentContextMap.get("ConsEtabView");
			}
			if (parentContextMap.containsKey("ConsuDiagView")) {
				context.ConsuDiagView = (String) parentContextMap.get("ConsuDiagView");
			}
			if (parentContextMap.containsKey("ConsuProView")) {
				context.ConsuProView = (String) parentContextMap.get("ConsuProView");
			}
			if (parentContextMap.containsKey("ConsuTable")) {
				context.ConsuTable = (String) parentContextMap.get("ConsuTable");
			}
			if (parentContextMap.containsKey("DeathTable")) {
				context.DeathTable = (String) parentContextMap.get("DeathTable");
			}
			if (parentContextMap.containsKey("DeathView")) {
				context.DeathView = (String) parentContextMap.get("DeathView");
			}
			if (parentContextMap.containsKey("DiagTable")) {
				context.DiagTable = (String) parentContextMap.get("DiagTable");
			}
			if (parentContextMap.containsKey("EtabTable")) {
				context.EtabTable = (String) parentContextMap.get("EtabTable");
			}
			if (parentContextMap.containsKey("HoscoTable")) {
				context.HoscoTable = (String) parentContextMap.get("HoscoTable");
			}
			if (parentContextMap.containsKey("HoscoView")) {
				context.HoscoView = (String) parentContextMap.get("HoscoView");
			}
			if (parentContextMap.containsKey("HospiDiagView")) {
				context.HospiDiagView = (String) parentContextMap.get("HospiDiagView");
			}
			if (parentContextMap.containsKey("HospiTable")) {
				context.HospiTable = (String) parentContextMap.get("HospiTable");
			}
			if (parentContextMap.containsKey("HosView")) {
				context.HosView = (String) parentContextMap.get("HosView");
			}
			if (parentContextMap.containsKey("PatientTable")) {
				context.PatientTable = (String) parentContextMap.get("PatientTable");
			}
			if (parentContextMap.containsKey("ProfTable")) {
				context.ProfTable = (String) parentContextMap.get("ProfTable");
			}
			if (parentContextMap.containsKey("RDVTable")) {
				context.RDVTable = (String) parentContextMap.get("RDVTable");
			}
			if (parentContextMap.containsKey("SatiTable")) {
				context.SatiTable = (String) parentContextMap.get("SatiTable");
			}
			if (parentContextMap.containsKey("SatiView")) {
				context.SatiView = (String) parentContextMap.get("SatiView");
			}
			if (parentContextMap.containsKey("VisiteTable")) {
				context.VisiteTable = (String) parentContextMap.get("VisiteTable");
			}
			if (parentContextMap.containsKey("ProjectHadoopCluster_JobHistory")) {
				context.ProjectHadoopCluster_JobHistory = (String) parentContextMap
						.get("ProjectHadoopCluster_JobHistory");
			}
			if (parentContextMap.containsKey("ProjectHadoopCluster_NameNodeUri")) {
				context.ProjectHadoopCluster_NameNodeUri = (String) parentContextMap
						.get("ProjectHadoopCluster_NameNodeUri");
			}
			if (parentContextMap.containsKey("ProjectHadoopCluster_ResourceManager")) {
				context.ProjectHadoopCluster_ResourceManager = (String) parentContextMap
						.get("ProjectHadoopCluster_ResourceManager");
			}
			if (parentContextMap.containsKey("ProjectHadoopCluster_ResourceManagerScheduler")) {
				context.ProjectHadoopCluster_ResourceManagerScheduler = (String) parentContextMap
						.get("ProjectHadoopCluster_ResourceManagerScheduler");
			}
			if (parentContextMap.containsKey("ProjectHadoopCluster_User")) {
				context.ProjectHadoopCluster_User = (String) parentContextMap.get("ProjectHadoopCluster_User");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tHiveConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tHiveConnection_1) {
			globalMap.put("tHiveConnection_1_SUBPROCESS_STATE", -1);

			e_tHiveConnection_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : View_Sati");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tHiveConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tHiveConnection_1", globalMap.get("conn_tHiveConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 153103 characters generated by Talend Open Studio for Big Data on the 18 mai
 * 2022 22:36:18 CEST
 ************************************************************************************************/