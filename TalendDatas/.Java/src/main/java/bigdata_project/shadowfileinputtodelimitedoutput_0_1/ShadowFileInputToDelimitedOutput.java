// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package bigdata_project.shadowfileinputtodelimitedoutput_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: ShadowFileInputToDelimitedOutput Purpose: <br>
 * Description: <br>
 * 
 * @author
 * @version 7.3.1.20200219_1130
 * @status
 */
public class ShadowFileInputToDelimitedOutput implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "ShadowFileInputToDelimitedOutput";
	private final String projectName = "BIGDATA_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					ShadowFileInputToDelimitedOutput.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(ShadowFileInputToDelimitedOutput.this,
									new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputExcel_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class RowStruct implements routines.system.IPersistableRow<RowStruct> {
		final static byte[] commonByteArrayLock_BIGDATA_PROJECT_ShadowFileInputToDelimitedOutput = new byte[0];
		static byte[] commonByteArray_BIGDATA_PROJECT_ShadowFileInputToDelimitedOutput = new byte[0];

		public String A;

		public String getA() {
			return this.A;
		}

		public String B;

		public String getB() {
			return this.B;
		}

		public String C;

		public String getC() {
			return this.C;
		}

		public String D;

		public String getD() {
			return this.D;
		}

		public String E;

		public String getE() {
			return this.E;
		}

		public String F;

		public String getF() {
			return this.F;
		}

		public String G;

		public String getG() {
			return this.G;
		}

		public String H;

		public String getH() {
			return this.H;
		}

		public String I;

		public String getI() {
			return this.I;
		}

		public String J;

		public String getJ() {
			return this.J;
		}

		public String K;

		public String getK() {
			return this.K;
		}

		public String L;

		public String getL() {
			return this.L;
		}

		public String M;

		public String getM() {
			return this.M;
		}

		public String N;

		public String getN() {
			return this.N;
		}

		public String O;

		public String getO() {
			return this.O;
		}

		public String P;

		public String getP() {
			return this.P;
		}

		public String Q;

		public String getQ() {
			return this.Q;
		}

		public String R;

		public String getR() {
			return this.R;
		}

		public String S;

		public String getS() {
			return this.S;
		}

		public String T;

		public String getT() {
			return this.T;
		}

		public String U;

		public String getU() {
			return this.U;
		}

		public String V;

		public String getV() {
			return this.V;
		}

		public String W;

		public String getW() {
			return this.W;
		}

		public String X;

		public String getX() {
			return this.X;
		}

		public String Y;

		public String getY() {
			return this.Y;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIGDATA_PROJECT_ShadowFileInputToDelimitedOutput.length) {
					if (length < 1024 && commonByteArray_BIGDATA_PROJECT_ShadowFileInputToDelimitedOutput.length == 0) {
						commonByteArray_BIGDATA_PROJECT_ShadowFileInputToDelimitedOutput = new byte[1024];
					} else {
						commonByteArray_BIGDATA_PROJECT_ShadowFileInputToDelimitedOutput = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIGDATA_PROJECT_ShadowFileInputToDelimitedOutput, 0, length);
				strReturn = new String(commonByteArray_BIGDATA_PROJECT_ShadowFileInputToDelimitedOutput, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIGDATA_PROJECT_ShadowFileInputToDelimitedOutput) {

				try {

					int length = 0;

					this.A = readString(dis);

					this.B = readString(dis);

					this.C = readString(dis);

					this.D = readString(dis);

					this.E = readString(dis);

					this.F = readString(dis);

					this.G = readString(dis);

					this.H = readString(dis);

					this.I = readString(dis);

					this.J = readString(dis);

					this.K = readString(dis);

					this.L = readString(dis);

					this.M = readString(dis);

					this.N = readString(dis);

					this.O = readString(dis);

					this.P = readString(dis);

					this.Q = readString(dis);

					this.R = readString(dis);

					this.S = readString(dis);

					this.T = readString(dis);

					this.U = readString(dis);

					this.V = readString(dis);

					this.W = readString(dis);

					this.X = readString(dis);

					this.Y = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.A, dos);

				// String

				writeString(this.B, dos);

				// String

				writeString(this.C, dos);

				// String

				writeString(this.D, dos);

				// String

				writeString(this.E, dos);

				// String

				writeString(this.F, dos);

				// String

				writeString(this.G, dos);

				// String

				writeString(this.H, dos);

				// String

				writeString(this.I, dos);

				// String

				writeString(this.J, dos);

				// String

				writeString(this.K, dos);

				// String

				writeString(this.L, dos);

				// String

				writeString(this.M, dos);

				// String

				writeString(this.N, dos);

				// String

				writeString(this.O, dos);

				// String

				writeString(this.P, dos);

				// String

				writeString(this.Q, dos);

				// String

				writeString(this.R, dos);

				// String

				writeString(this.S, dos);

				// String

				writeString(this.T, dos);

				// String

				writeString(this.U, dos);

				// String

				writeString(this.V, dos);

				// String

				writeString(this.W, dos);

				// String

				writeString(this.X, dos);

				// String

				writeString(this.Y, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("A=" + A);
			sb.append(",B=" + B);
			sb.append(",C=" + C);
			sb.append(",D=" + D);
			sb.append(",E=" + E);
			sb.append(",F=" + F);
			sb.append(",G=" + G);
			sb.append(",H=" + H);
			sb.append(",I=" + I);
			sb.append(",J=" + J);
			sb.append(",K=" + K);
			sb.append(",L=" + L);
			sb.append(",M=" + M);
			sb.append(",N=" + N);
			sb.append(",O=" + O);
			sb.append(",P=" + P);
			sb.append(",Q=" + Q);
			sb.append(",R=" + R);
			sb.append(",S=" + S);
			sb.append(",T=" + T);
			sb.append(",U=" + U);
			sb.append(",V=" + V);
			sb.append(",W=" + W);
			sb.append(",X=" + X);
			sb.append(",Y=" + Y);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(RowStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcelProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputExcel_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				RowStruct Row = new RowStruct();

				/**
				 * [tFileOutputDelimited begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited", false);
				start_Hash.put("tFileOutputDelimited", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited";

				int tos_count_tFileOutputDelimited = 0;

				String fileName_tFileOutputDelimited = "";
				fileName_tFileOutputDelimited = (new java.io.File(
						"C:/Users/Administrateur.WIN-T87HKARVT4F/Documents/Data/BigData/TalendDatas/BIGDATA_PROJECT/temp/preview/resultats-esatis48h-mco-open-data-2020.csv"))
								.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited = null;
				String extension_tFileOutputDelimited = null;
				String directory_tFileOutputDelimited = null;
				if ((fileName_tFileOutputDelimited.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited.lastIndexOf(".") < fileName_tFileOutputDelimited
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited = fileName_tFileOutputDelimited;
						extension_tFileOutputDelimited = "";
					} else {
						fullName_tFileOutputDelimited = fileName_tFileOutputDelimited.substring(0,
								fileName_tFileOutputDelimited.lastIndexOf("."));
						extension_tFileOutputDelimited = fileName_tFileOutputDelimited
								.substring(fileName_tFileOutputDelimited.lastIndexOf("."));
					}
					directory_tFileOutputDelimited = fileName_tFileOutputDelimited.substring(0,
							fileName_tFileOutputDelimited.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited = fileName_tFileOutputDelimited.substring(0,
								fileName_tFileOutputDelimited.lastIndexOf("."));
						extension_tFileOutputDelimited = fileName_tFileOutputDelimited
								.substring(fileName_tFileOutputDelimited.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited = fileName_tFileOutputDelimited;
						extension_tFileOutputDelimited = "";
					}
					directory_tFileOutputDelimited = "";
				}
				boolean isFileGenerated_tFileOutputDelimited = true;
				java.io.File filetFileOutputDelimited = new java.io.File(fileName_tFileOutputDelimited);
				globalMap.put("tFileOutputDelimited_FILE_NAME", fileName_tFileOutputDelimited);
				String[] headColutFileOutputDelimited = new String[25];
				class CSVBasicSet_tFileOutputDelimited {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep) throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited[] = null;

						// support passing value (property: Field Separator) by 'context.fs' or
						// 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited = fieldSep.toCharArray();
						} else {
							throw new IllegalArgumentException("Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(";");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited[] = null;

						// support passing value (property: Row Separator) by 'context.rs' or
						// 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited = rowSep.toCharArray();
						} else {
							throw new IllegalArgumentException("Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException("Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited = strTextEnclosure.toCharArray();
						} else {
							throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited = 0;
				int splitedFileNo_tFileOutputDelimited = 0;
				int currentRow_tFileOutputDelimited = 0;

				CSVBasicSet_tFileOutputDelimited csvSettings_tFileOutputDelimited = new CSVBasicSet_tFileOutputDelimited();
				csvSettings_tFileOutputDelimited.setFieldSeparator(";");
				csvSettings_tFileOutputDelimited.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited.setEscapeAndTextEnclosure("\\", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited != null && directory_tFileOutputDelimited.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited = new java.io.File(directory_tFileOutputDelimited);
					if (!dir_tFileOutputDelimited.exists()) {
						dir_tFileOutputDelimited.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited = null;

				java.io.File fileToDelete_tFileOutputDelimited = new java.io.File(fileName_tFileOutputDelimited);
				if (fileToDelete_tFileOutputDelimited.exists()) {
					fileToDelete_tFileOutputDelimited.delete();
				}
				CsvWritertFileOutputDelimited = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(fileName_tFileOutputDelimited, false), "UTF-8")));
				CsvWritertFileOutputDelimited.setSeparator(csvSettings_tFileOutputDelimited.getFieldDelim());
				if (csvSettings_tFileOutputDelimited.isUseCRLFRecordDelimiter()) {
					CsvWritertFileOutputDelimited.setLineEnd("\r\n");
				} else {
					CsvWritertFileOutputDelimited.setLineEnd("" + csvSettings_tFileOutputDelimited.getRowDelim());
				}
				CsvWritertFileOutputDelimited.setEscapeChar(csvSettings_tFileOutputDelimited.getEscapeChar());
				CsvWritertFileOutputDelimited.setQuoteChar(csvSettings_tFileOutputDelimited.getTextEnclosure());
				CsvWritertFileOutputDelimited.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited", CsvWritertFileOutputDelimited);
				resourceMap.put("nb_line_tFileOutputDelimited", nb_line_tFileOutputDelimited);

				/**
				 * [tFileOutputDelimited begin ] stop
				 */

				/**
				 * [tFileInputExcel begin ] start
				 */

				ok_Hash.put("tFileInputExcel", false);
				start_Hash.put("tFileInputExcel", System.currentTimeMillis());

				currentComponent = "tFileInputExcel";

				int tos_count_tFileInputExcel = 0;

				final String decryptedPassword_tFileInputExcel = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:78XrdKKU2NO32KiyOHRKXoawD1Z4t+L6L4qwyg==");
				String password_tFileInputExcel = decryptedPassword_tFileInputExcel;
				if (password_tFileInputExcel.isEmpty()) {
					password_tFileInputExcel = null;
				}
				Object source_tFileInputExcel = "C:/Users/Administrateur.WIN-T87HKARVT4F/Documents/Satisfaction_Patient/Satisfaction_2020/resultats-esatis48h-mco-open-data-2020.xlsx";
				com.talend.excel.xssf.event.ExcelReader excelReader_tFileInputExcel = null;

				if (source_tFileInputExcel instanceof java.io.InputStream || source_tFileInputExcel instanceof String) {
					excelReader_tFileInputExcel = new com.talend.excel.xssf.event.ExcelReader();
					excelReader_tFileInputExcel.setIncludePhoneticRuns(true);
				} else {
					throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
				}

				try {
					excelReader_tFileInputExcel.addSheetName(".*", true);
					int start_column_tFileInputExcel = 1 - 1;
					int end_column_tFileInputExcel = -1;
					if (start_column_tFileInputExcel >= 0) {// follow start column

						end_column_tFileInputExcel = start_column_tFileInputExcel + 25 - 1;

					} else if (end_column_tFileInputExcel >= 0) {// follow end column
						start_column_tFileInputExcel = end_column_tFileInputExcel - 25 + 1;
					}

					if (end_column_tFileInputExcel < 0 || start_column_tFileInputExcel < 0) {
						throw new RuntimeException("Error start column and end column.");
					}
					int actual_end_column_tFileInputExcel = end_column_tFileInputExcel;

					int header_tFileInputExcel = 0;
					int limit_tFileInputExcel = 50;

					int nb_line_tFileInputExcel = 0;

					// for the number format
					java.text.DecimalFormat df_tFileInputExcel = new java.text.DecimalFormat(
							"#.####################################");
					char decimalChar_tFileInputExcel = df_tFileInputExcel.getDecimalFormatSymbols()
							.getDecimalSeparator();

					if (source_tFileInputExcel instanceof String) {
						excelReader_tFileInputExcel.parse((String) source_tFileInputExcel, "UTF-8",
								password_tFileInputExcel);
					} else if (source_tFileInputExcel instanceof java.io.InputStream) {
						excelReader_tFileInputExcel.parse((java.io.InputStream) source_tFileInputExcel, "UTF-8",
								password_tFileInputExcel);
					}

					while ((header_tFileInputExcel--) > 0 && excelReader_tFileInputExcel.hasNext()) {// skip the header
						excelReader_tFileInputExcel.next();
					}

					while (excelReader_tFileInputExcel.hasNext()) {
						int emptyColumnCount_tFileInputExcel = 0;

						if (limit_tFileInputExcel != -1 && nb_line_tFileInputExcel >= limit_tFileInputExcel) {
							excelReader_tFileInputExcel.stopRead();
							break;
						}

						java.util.List<String> row_tFileInputExcel = excelReader_tFileInputExcel.next();
						Row = null;
						int tempRowLength_tFileInputExcel = 25;

						int columnIndex_tFileInputExcel = 0;

						String[] temp_row_tFileInputExcel = new String[tempRowLength_tFileInputExcel];

						for (int i_tFileInputExcel = 0; i_tFileInputExcel < tempRowLength_tFileInputExcel; i_tFileInputExcel++) {
							int current_tFileInputExcel = i_tFileInputExcel + start_column_tFileInputExcel;
							if (current_tFileInputExcel <= actual_end_column_tFileInputExcel) {
								if (current_tFileInputExcel < row_tFileInputExcel.size()) {
									String column_tFileInputExcel = row_tFileInputExcel.get(current_tFileInputExcel);
									if (column_tFileInputExcel != null) {
										temp_row_tFileInputExcel[i_tFileInputExcel] = column_tFileInputExcel;
									} else {
										temp_row_tFileInputExcel[i_tFileInputExcel] = "";
									}
								} else {
									temp_row_tFileInputExcel[i_tFileInputExcel] = "";
								}
							} else {
								temp_row_tFileInputExcel[i_tFileInputExcel] = "";
							}
						}

						boolean whetherReject_tFileInputExcel = false;
						Row = new RowStruct();
						int curColNum_tFileInputExcel = -1;
						String curColName_tFileInputExcel = "";

						try {
							columnIndex_tFileInputExcel = 0;

							if (temp_row_tFileInputExcel[columnIndex_tFileInputExcel].length() > 0) {
								curColNum_tFileInputExcel = columnIndex_tFileInputExcel + start_column_tFileInputExcel
										+ 1;
								curColName_tFileInputExcel = "A";

								Row.A = temp_row_tFileInputExcel[columnIndex_tFileInputExcel];
							} else {
								Row.A = null;
								emptyColumnCount_tFileInputExcel++;
							}
							columnIndex_tFileInputExcel = 1;

							if (temp_row_tFileInputExcel[columnIndex_tFileInputExcel].length() > 0) {
								curColNum_tFileInputExcel = columnIndex_tFileInputExcel + start_column_tFileInputExcel
										+ 1;
								curColName_tFileInputExcel = "B";

								Row.B = temp_row_tFileInputExcel[columnIndex_tFileInputExcel];
							} else {
								Row.B = null;
								emptyColumnCount_tFileInputExcel++;
							}
							columnIndex_tFileInputExcel = 2;

							if (temp_row_tFileInputExcel[columnIndex_tFileInputExcel].length() > 0) {
								curColNum_tFileInputExcel = columnIndex_tFileInputExcel + start_column_tFileInputExcel
										+ 1;
								curColName_tFileInputExcel = "C";

								Row.C = temp_row_tFileInputExcel[columnIndex_tFileInputExcel];
							} else {
								Row.C = null;
								emptyColumnCount_tFileInputExcel++;
							}
							columnIndex_tFileInputExcel = 3;

							if (temp_row_tFileInputExcel[columnIndex_tFileInputExcel].length() > 0) {
								curColNum_tFileInputExcel = columnIndex_tFileInputExcel + start_column_tFileInputExcel
										+ 1;
								curColName_tFileInputExcel = "D";

								Row.D = temp_row_tFileInputExcel[columnIndex_tFileInputExcel];
							} else {
								Row.D = null;
								emptyColumnCount_tFileInputExcel++;
							}
							columnIndex_tFileInputExcel = 4;

							if (temp_row_tFileInputExcel[columnIndex_tFileInputExcel].length() > 0) {
								curColNum_tFileInputExcel = columnIndex_tFileInputExcel + start_column_tFileInputExcel
										+ 1;
								curColName_tFileInputExcel = "E";

								Row.E = temp_row_tFileInputExcel[columnIndex_tFileInputExcel];
							} else {
								Row.E = null;
								emptyColumnCount_tFileInputExcel++;
							}
							columnIndex_tFileInputExcel = 5;

							if (temp_row_tFileInputExcel[columnIndex_tFileInputExcel].length() > 0) {
								curColNum_tFileInputExcel = columnIndex_tFileInputExcel + start_column_tFileInputExcel
										+ 1;
								curColName_tFileInputExcel = "F";

								Row.F = temp_row_tFileInputExcel[columnIndex_tFileInputExcel];
							} else {
								Row.F = null;
								emptyColumnCount_tFileInputExcel++;
							}
							columnIndex_tFileInputExcel = 6;

							if (temp_row_tFileInputExcel[columnIndex_tFileInputExcel].length() > 0) {
								curColNum_tFileInputExcel = columnIndex_tFileInputExcel + start_column_tFileInputExcel
										+ 1;
								curColName_tFileInputExcel = "G";

								Row.G = temp_row_tFileInputExcel[columnIndex_tFileInputExcel];
							} else {
								Row.G = null;
								emptyColumnCount_tFileInputExcel++;
							}
							columnIndex_tFileInputExcel = 7;

							if (temp_row_tFileInputExcel[columnIndex_tFileInputExcel].length() > 0) {
								curColNum_tFileInputExcel = columnIndex_tFileInputExcel + start_column_tFileInputExcel
										+ 1;
								curColName_tFileInputExcel = "H";

								Row.H = temp_row_tFileInputExcel[columnIndex_tFileInputExcel];
							} else {
								Row.H = null;
								emptyColumnCount_tFileInputExcel++;
							}
							columnIndex_tFileInputExcel = 8;

							if (temp_row_tFileInputExcel[columnIndex_tFileInputExcel].length() > 0) {
								curColNum_tFileInputExcel = columnIndex_tFileInputExcel + start_column_tFileInputExcel
										+ 1;
								curColName_tFileInputExcel = "I";

								Row.I = temp_row_tFileInputExcel[columnIndex_tFileInputExcel];
							} else {
								Row.I = null;
								emptyColumnCount_tFileInputExcel++;
							}
							columnIndex_tFileInputExcel = 9;

							if (temp_row_tFileInputExcel[columnIndex_tFileInputExcel].length() > 0) {
								curColNum_tFileInputExcel = columnIndex_tFileInputExcel + start_column_tFileInputExcel
										+ 1;
								curColName_tFileInputExcel = "J";

								Row.J = temp_row_tFileInputExcel[columnIndex_tFileInputExcel];
							} else {
								Row.J = null;
								emptyColumnCount_tFileInputExcel++;
							}
							columnIndex_tFileInputExcel = 10;

							if (temp_row_tFileInputExcel[columnIndex_tFileInputExcel].length() > 0) {
								curColNum_tFileInputExcel = columnIndex_tFileInputExcel + start_column_tFileInputExcel
										+ 1;
								curColName_tFileInputExcel = "K";

								Row.K = temp_row_tFileInputExcel[columnIndex_tFileInputExcel];
							} else {
								Row.K = null;
								emptyColumnCount_tFileInputExcel++;
							}
							columnIndex_tFileInputExcel = 11;

							if (temp_row_tFileInputExcel[columnIndex_tFileInputExcel].length() > 0) {
								curColNum_tFileInputExcel = columnIndex_tFileInputExcel + start_column_tFileInputExcel
										+ 1;
								curColName_tFileInputExcel = "L";

								Row.L = temp_row_tFileInputExcel[columnIndex_tFileInputExcel];
							} else {
								Row.L = null;
								emptyColumnCount_tFileInputExcel++;
							}
							columnIndex_tFileInputExcel = 12;

							if (temp_row_tFileInputExcel[columnIndex_tFileInputExcel].length() > 0) {
								curColNum_tFileInputExcel = columnIndex_tFileInputExcel + start_column_tFileInputExcel
										+ 1;
								curColName_tFileInputExcel = "M";

								Row.M = temp_row_tFileInputExcel[columnIndex_tFileInputExcel];
							} else {
								Row.M = null;
								emptyColumnCount_tFileInputExcel++;
							}
							columnIndex_tFileInputExcel = 13;

							if (temp_row_tFileInputExcel[columnIndex_tFileInputExcel].length() > 0) {
								curColNum_tFileInputExcel = columnIndex_tFileInputExcel + start_column_tFileInputExcel
										+ 1;
								curColName_tFileInputExcel = "N";

								Row.N = temp_row_tFileInputExcel[columnIndex_tFileInputExcel];
							} else {
								Row.N = null;
								emptyColumnCount_tFileInputExcel++;
							}
							columnIndex_tFileInputExcel = 14;

							if (temp_row_tFileInputExcel[columnIndex_tFileInputExcel].length() > 0) {
								curColNum_tFileInputExcel = columnIndex_tFileInputExcel + start_column_tFileInputExcel
										+ 1;
								curColName_tFileInputExcel = "O";

								Row.O = temp_row_tFileInputExcel[columnIndex_tFileInputExcel];
							} else {
								Row.O = null;
								emptyColumnCount_tFileInputExcel++;
							}
							columnIndex_tFileInputExcel = 15;

							if (temp_row_tFileInputExcel[columnIndex_tFileInputExcel].length() > 0) {
								curColNum_tFileInputExcel = columnIndex_tFileInputExcel + start_column_tFileInputExcel
										+ 1;
								curColName_tFileInputExcel = "P";

								Row.P = temp_row_tFileInputExcel[columnIndex_tFileInputExcel];
							} else {
								Row.P = null;
								emptyColumnCount_tFileInputExcel++;
							}
							columnIndex_tFileInputExcel = 16;

							if (temp_row_tFileInputExcel[columnIndex_tFileInputExcel].length() > 0) {
								curColNum_tFileInputExcel = columnIndex_tFileInputExcel + start_column_tFileInputExcel
										+ 1;
								curColName_tFileInputExcel = "Q";

								Row.Q = temp_row_tFileInputExcel[columnIndex_tFileInputExcel];
							} else {
								Row.Q = null;
								emptyColumnCount_tFileInputExcel++;
							}
							columnIndex_tFileInputExcel = 17;

							if (temp_row_tFileInputExcel[columnIndex_tFileInputExcel].length() > 0) {
								curColNum_tFileInputExcel = columnIndex_tFileInputExcel + start_column_tFileInputExcel
										+ 1;
								curColName_tFileInputExcel = "R";

								Row.R = temp_row_tFileInputExcel[columnIndex_tFileInputExcel];
							} else {
								Row.R = null;
								emptyColumnCount_tFileInputExcel++;
							}
							columnIndex_tFileInputExcel = 18;

							if (temp_row_tFileInputExcel[columnIndex_tFileInputExcel].length() > 0) {
								curColNum_tFileInputExcel = columnIndex_tFileInputExcel + start_column_tFileInputExcel
										+ 1;
								curColName_tFileInputExcel = "S";

								Row.S = temp_row_tFileInputExcel[columnIndex_tFileInputExcel];
							} else {
								Row.S = null;
								emptyColumnCount_tFileInputExcel++;
							}
							columnIndex_tFileInputExcel = 19;

							if (temp_row_tFileInputExcel[columnIndex_tFileInputExcel].length() > 0) {
								curColNum_tFileInputExcel = columnIndex_tFileInputExcel + start_column_tFileInputExcel
										+ 1;
								curColName_tFileInputExcel = "T";

								Row.T = temp_row_tFileInputExcel[columnIndex_tFileInputExcel];
							} else {
								Row.T = null;
								emptyColumnCount_tFileInputExcel++;
							}
							columnIndex_tFileInputExcel = 20;

							if (temp_row_tFileInputExcel[columnIndex_tFileInputExcel].length() > 0) {
								curColNum_tFileInputExcel = columnIndex_tFileInputExcel + start_column_tFileInputExcel
										+ 1;
								curColName_tFileInputExcel = "U";

								Row.U = temp_row_tFileInputExcel[columnIndex_tFileInputExcel];
							} else {
								Row.U = null;
								emptyColumnCount_tFileInputExcel++;
							}
							columnIndex_tFileInputExcel = 21;

							if (temp_row_tFileInputExcel[columnIndex_tFileInputExcel].length() > 0) {
								curColNum_tFileInputExcel = columnIndex_tFileInputExcel + start_column_tFileInputExcel
										+ 1;
								curColName_tFileInputExcel = "V";

								Row.V = temp_row_tFileInputExcel[columnIndex_tFileInputExcel];
							} else {
								Row.V = null;
								emptyColumnCount_tFileInputExcel++;
							}
							columnIndex_tFileInputExcel = 22;

							if (temp_row_tFileInputExcel[columnIndex_tFileInputExcel].length() > 0) {
								curColNum_tFileInputExcel = columnIndex_tFileInputExcel + start_column_tFileInputExcel
										+ 1;
								curColName_tFileInputExcel = "W";

								Row.W = temp_row_tFileInputExcel[columnIndex_tFileInputExcel];
							} else {
								Row.W = null;
								emptyColumnCount_tFileInputExcel++;
							}
							columnIndex_tFileInputExcel = 23;

							if (temp_row_tFileInputExcel[columnIndex_tFileInputExcel].length() > 0) {
								curColNum_tFileInputExcel = columnIndex_tFileInputExcel + start_column_tFileInputExcel
										+ 1;
								curColName_tFileInputExcel = "X";

								Row.X = temp_row_tFileInputExcel[columnIndex_tFileInputExcel];
							} else {
								Row.X = null;
								emptyColumnCount_tFileInputExcel++;
							}
							columnIndex_tFileInputExcel = 24;

							if (temp_row_tFileInputExcel[columnIndex_tFileInputExcel].length() > 0) {
								curColNum_tFileInputExcel = columnIndex_tFileInputExcel + start_column_tFileInputExcel
										+ 1;
								curColName_tFileInputExcel = "Y";

								Row.Y = temp_row_tFileInputExcel[columnIndex_tFileInputExcel];
							} else {
								Row.Y = null;
								emptyColumnCount_tFileInputExcel++;
							}
							nb_line_tFileInputExcel++;

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputExcel = true;
							System.err.println(e.getMessage());
							Row = null;
						}

						/**
						 * [tFileInputExcel begin ] stop
						 */

						/**
						 * [tFileInputExcel main ] start
						 */

						currentComponent = "tFileInputExcel";

						tos_count_tFileInputExcel++;

						/**
						 * [tFileInputExcel main ] stop
						 */

						/**
						 * [tFileInputExcel process_data_begin ] start
						 */

						currentComponent = "tFileInputExcel";

						/**
						 * [tFileInputExcel process_data_begin ] stop
						 */
// Start of branch "Row"
						if (Row != null) {

							/**
							 * [tFileOutputDelimited main ] start
							 */

							currentComponent = "tFileOutputDelimited";

							String[] rowtFileOutputDelimited = new String[25];
							rowtFileOutputDelimited[0] = Row.A == null ? null : Row.A;
							rowtFileOutputDelimited[1] = Row.B == null ? null : Row.B;
							rowtFileOutputDelimited[2] = Row.C == null ? null : Row.C;
							rowtFileOutputDelimited[3] = Row.D == null ? null : Row.D;
							rowtFileOutputDelimited[4] = Row.E == null ? null : Row.E;
							rowtFileOutputDelimited[5] = Row.F == null ? null : Row.F;
							rowtFileOutputDelimited[6] = Row.G == null ? null : Row.G;
							rowtFileOutputDelimited[7] = Row.H == null ? null : Row.H;
							rowtFileOutputDelimited[8] = Row.I == null ? null : Row.I;
							rowtFileOutputDelimited[9] = Row.J == null ? null : Row.J;
							rowtFileOutputDelimited[10] = Row.K == null ? null : Row.K;
							rowtFileOutputDelimited[11] = Row.L == null ? null : Row.L;
							rowtFileOutputDelimited[12] = Row.M == null ? null : Row.M;
							rowtFileOutputDelimited[13] = Row.N == null ? null : Row.N;
							rowtFileOutputDelimited[14] = Row.O == null ? null : Row.O;
							rowtFileOutputDelimited[15] = Row.P == null ? null : Row.P;
							rowtFileOutputDelimited[16] = Row.Q == null ? null : Row.Q;
							rowtFileOutputDelimited[17] = Row.R == null ? null : Row.R;
							rowtFileOutputDelimited[18] = Row.S == null ? null : Row.S;
							rowtFileOutputDelimited[19] = Row.T == null ? null : Row.T;
							rowtFileOutputDelimited[20] = Row.U == null ? null : Row.U;
							rowtFileOutputDelimited[21] = Row.V == null ? null : Row.V;
							rowtFileOutputDelimited[22] = Row.W == null ? null : Row.W;
							rowtFileOutputDelimited[23] = Row.X == null ? null : Row.X;
							rowtFileOutputDelimited[24] = Row.Y == null ? null : Row.Y;
							nb_line_tFileOutputDelimited++;
							resourceMap.put("nb_line_tFileOutputDelimited", nb_line_tFileOutputDelimited);
							CsvWritertFileOutputDelimited.writeNext(rowtFileOutputDelimited);

							tos_count_tFileOutputDelimited++;

							/**
							 * [tFileOutputDelimited main ] stop
							 */

							/**
							 * [tFileOutputDelimited process_data_begin ] start
							 */

							currentComponent = "tFileOutputDelimited";

							/**
							 * [tFileOutputDelimited process_data_begin ] stop
							 */

							/**
							 * [tFileOutputDelimited process_data_end ] start
							 */

							currentComponent = "tFileOutputDelimited";

							/**
							 * [tFileOutputDelimited process_data_end ] stop
							 */

						} // End of branch "Row"

						/**
						 * [tFileInputExcel process_data_end ] start
						 */

						currentComponent = "tFileInputExcel";

						/**
						 * [tFileInputExcel process_data_end ] stop
						 */

						/**
						 * [tFileInputExcel end ] start
						 */

						currentComponent = "tFileInputExcel";

					}

					try {
						if (excelReader_tFileInputExcel != null) {
							excelReader_tFileInputExcel.handleException();
						}
					} catch (java.lang.Exception e_tFileInputExcel) {
						if (!(e_tFileInputExcel
								.getCause() instanceof com.talend.excel.xssf.event.EnoughDataException)) {

							System.err.println(e_tFileInputExcel.getMessage());

						}
					}

					globalMap.put("tFileInputExcel_NB_LINE", nb_line_tFileInputExcel);

				} finally {

				}

				ok_Hash.put("tFileInputExcel", true);
				end_Hash.put("tFileInputExcel", System.currentTimeMillis());

				/**
				 * [tFileInputExcel end ] stop
				 */

				/**
				 * [tFileOutputDelimited end ] start
				 */

				currentComponent = "tFileOutputDelimited";

				if (CsvWritertFileOutputDelimited != null) {
					CsvWritertFileOutputDelimited.close();
				}

				globalMap.put("tFileOutputDelimited_NB_LINE", nb_line_tFileOutputDelimited);

				resourceMap.put("finish_tFileOutputDelimited", true);

				ok_Hash.put("tFileOutputDelimited", true);
				end_Hash.put("tFileOutputDelimited", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel finally ] start
				 */

				currentComponent = "tFileInputExcel";

				/**
				 * [tFileInputExcel finally ] stop
				 */

				/**
				 * [tFileOutputDelimited finally ] start
				 */

				currentComponent = "tFileOutputDelimited";

				if (resourceMap.get("finish_tFileOutputDelimited") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited");

					if (CsvWritertFileOutputDelimited != null) {
						CsvWritertFileOutputDelimited.close();
					}

				}

				/**
				 * [tFileOutputDelimited finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Shadow";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final ShadowFileInputToDelimitedOutput ShadowFileInputToDelimitedOutputClass = new ShadowFileInputToDelimitedOutput();

		int exitCode = ShadowFileInputToDelimitedOutputClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = ShadowFileInputToDelimitedOutput.class.getClassLoader().getResourceAsStream(
					"bigdata_project/shadowfileinputtodelimitedoutput_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = ShadowFileInputToDelimitedOutput.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputExcelProcess(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputExcel) {
			globalMap.put("tFileInputExcel_SUBPROCESS_STATE", -1);

			e_tFileInputExcel.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : ShadowFileInputToDelimitedOutput");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 61009 characters generated by Talend Open Studio for Big Data on the 9 mai
 * 2022 14:05:10 CEST
 ************************************************************************************************/